var documenterSearchIndex = {"docs":
[{"location":"lib/internals/dom/#DOM","page":"DOM","title":"DOM","text":"","category":"section"},{"location":"lib/internals/dom/","page":"DOM","title":"DOM","text":"Modules = [Documenter.Utilities.DOM]","category":"page"},{"location":"lib/internals/doctests/#DocTests","page":"DocTests","title":"DocTests","text":"","category":"section"},{"location":"lib/internals/doctests/","page":"DocTests","title":"DocTests","text":"Modules = [Documenter.DocTests]","category":"page"},{"location":"lib/internals/builder/#Builder","page":"Builder","title":"Builder","text":"","category":"section"},{"location":"lib/internals/builder/","page":"Builder","title":"Builder","text":"Modules = [Documenter.Builder]","category":"page"},{"location":"man/hosting/walkthrough/#SSH-Deploy-Keys-Walkthrough","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"","category":"section"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"If the instructions in Authentication: SSH Deploy Keys did not work for you (for example, ssh-keygen is not installed), don't worry! This walkthrough will guide you through the process. There are three main steps:","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"Generating an SSH Key\nAdding the Public Key to GitHub\nAdding the Private Key","category":"page"},{"location":"man/hosting/walkthrough/#Generating-an-SSH-Key","page":"SSH Deploy Keys Walkthrough","title":"Generating an SSH Key","text":"","category":"section"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"The first step is to generate an SSH key. An SSH key is made up of two components: a public key, which can be shared publicly, and a private key, which you should ensure is never shared publicly.","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"The public key usually looks something like this","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"ssh-rsa [base64-encoded-key] [optional-comment]","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"And the private key usually look something like this","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"-----BEGIN RSA PRIVATE KEY-----\n ... base64-encoded key over several lines ...\n-----END RSA PRIVATE KEY-----","category":"page"},{"location":"man/hosting/walkthrough/#If-you-have-ssh-keygen-installed","page":"SSH Deploy Keys Walkthrough","title":"If you have ssh-keygen installed","text":"","category":"section"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"If you have ssh-keygen installed, but DocumenterTools.genkeys() didn't work, you can generate an SSH key as follows. First, generate a key using ssh-keygen and save it to the file privatekey:","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"shell> ssh-keygen -N \"\" -f privatekey","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"Next, we need to encode the private key in Base64. Run the following command:","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"julia> using Base64\n\njulia> read(\"privatekey\", String) |> base64encode |>  println","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"Copy and paste the output somewhere. This is your private key and is required for the last step.","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"Now we need to get the public key. Run the following command:","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"julia> read(\"privatekey.pub\", String) |> println","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"Copy and paste the output somewhere. This is your public key and is required for the step Adding the Public Key to GitHub.","category":"page"},{"location":"man/hosting/walkthrough/#If-you-do-not-have-ssh-keygen","page":"SSH Deploy Keys Walkthrough","title":"If you do not have ssh-keygen","text":"","category":"section"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"If you're using Windows, you probably don't have ssh-keygen installed. Instead, we're going to use a program called PuTTY. The first step in the process to generate a new SSH key is to download PuTTY:","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"Download and install PuTTY","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"PuTTY is actually a collection of a few different programs. We need to use PuTTYgen. Open it, and you should get a window that looks like:","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"(Image: )","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"Now we need to generate a key.","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"Click the \"Generate\" button, then follow the instructions and move the mouse around to create randomness.","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"Once you've moved the mouse enough, the window should look like:","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"(Image: )","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"Now we need to save the public key somewhere.","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"Copy the text in the box titled \"Public key for pasting into OpenSSH authorized_keys file\" and paste it somewhere for later. This is your public key and is required for the step Adding the Public Key to GitHub","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"Finally, we need to save the private key somewhere.","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"Click the \"Conversions\" tab, and then click \"Export OpenSSH key\". Save that file somewhere. That file is your private key and is required for the last step.\n(Image: )\nnote: Note\nDon't save your key via the \"Save private key\" button as this will save the key in the wrong format.","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"If you made it this far, congratulations! You now have the private and public keys needed to set up automatic deployment of your documentation. The next steps are to add the keys to GitHub and Travis.","category":"page"},{"location":"man/hosting/walkthrough/#Adding-the-Public-Key-to-GitHub","page":"SSH Deploy Keys Walkthrough","title":"Adding the Public Key to GitHub","text":"","category":"section"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"In this section, we explain how to upload a public SSH key to GitHub. By this point, you should have generated a public key and saved it to a file. If you haven't done this, go read Generating an SSH Key.","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"Go to https://github.com/[YOUR_USER_NAME]/[YOUR_REPO_NAME]/settings/keys and click \"Add deploy key\". You should get to a page that looks like:","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"(Image: )","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"Now we need to fill in three pieces of information.","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"Have \"Title\" be e.g. \"Documenter\".\nCopy and paste the public key that we generated in the Generating an SSH Key step into the \"Key\" field.\nMake sure that the \"Allow write access\" box is checked.","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"Once you're done, click \"Add key\". Congratulations! You've added the public key to GitHub. The next step is to add the private key to Travis or GitHub Secrets.","category":"page"},{"location":"man/hosting/walkthrough/#Adding-the-Private-Key","page":"SSH Deploy Keys Walkthrough","title":"Adding the Private Key","text":"","category":"section"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"In this section, we explain how to upload a private SSH key to Travis. By this point, you should have generated a private key and saved it to a file. If you haven't done this, go read Generating an SSH Key.","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"First, we need to Base64 encode the private key. Open Julia, and run the command","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"julia> using Base64\n\njulia> read(\"path/to/private/key\", String) |> base64encode |> println","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"Copy the resulting output.","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"Go to https://travis-ci.com/[YOUR_USER_NAME]/[YOUR_REPO_NAME]/settings. Scroll down to the \"Environment Variables\" section. It should look like this:","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"(Image: )","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"Now, add a new environment variable called DOCUMENTER_KEY, and set its value to the output from the Julia command above (make sure to remove the surrounding quotes).","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"Finally, make sure that the \"Display value in build log\" is left switched off and then click \"Add\". Congratulations! You've added the private key to Travis.","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"warning: Security warning\nTo reiterate: make sure that the \"Display value in build log\" option is OFF for the variable, so that it does not get printed when the tests run. This base64-encoded string contains the unencrypted private key that gives full write access to your repository, so it must be kept safe.  Also, make sure that you never expose this variable in your tests, nor merge any code that does. You can read more about Travis environment variables in Travis User Documentation.","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"Final Remarks","category":"page"},{"location":"man/hosting/walkthrough/","page":"SSH Deploy Keys Walkthrough","title":"SSH Deploy Keys Walkthrough","text":"You should now be able to continue on with the Hosting Documentation.","category":"page"},{"location":"contributing/#Contributing","page":"Contributing","title":"Contributing","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"This page details the some of the guidelines that should be followed when contributing to this package.","category":"page"},{"location":"contributing/#Branches","page":"Contributing","title":"Branches","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"From Documenter version 0.3 onwards release-* branches are used for tagged minor versions of this package. This follows the same approach used in the main Julia repository, albeit on a much more modest scale.","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Please open pull requests against the master branch rather than any of the release-* branches whenever possible.","category":"page"},{"location":"contributing/#Backports","page":"Contributing","title":"Backports","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Bug fixes are backported to the release-* branches using git cherry-pick -x by a JuliaDocs member and will become available in point releases of that particular minor version of the package.","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Feel free to nominate commits that should be backported by opening an issue. Requests for new point releases to be tagged in METADATA.jl can also be made in the same way.","category":"page"},{"location":"contributing/#release-*-branches","page":"Contributing","title":"release-* branches","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Each new minor version x.y.0 gets a branch called release-x.y (a protected branch).\nNew versions are usually tagged only from the release-x.y branches.\nFor patch releases, changes get backported to the release-x.y branch via a single PR with the standard name \"Backports for x.y.z\" and label \"Type: Backport\". The PR message links to all the PRs that are providing commits to the backport. The PR gets merged as a merge commit (i.e. not squashed).\nThe old release-* branches may be removed once they have outlived their usefulness.\nPatch version milestones are used to keep track of which PRs get backported etc.","category":"page"},{"location":"contributing/#Style-Guide","page":"Contributing","title":"Style Guide","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Follow the style of the surrounding text when making changes. When adding new features please try to stick to the following points whenever applicable.","category":"page"},{"location":"contributing/#Julia","page":"Contributing","title":"Julia","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"4-space indentation;\nmodules spanning entire files should not be indented, but modules that have surrounding code should;\nno blank lines at the start or end of files;\ndo not manually align syntax such as = or :: over adjacent lines;\nuse function ... end when a method definition contains more than one toplevel expression;\nrelated short-form method definitions don't need a new line between them;\nunrelated or long-form method definitions must have a blank line separating each one;\nsurround all binary operators with whitespace except for ::, ^, and :;\nfiles containing a single module ... end must be named after the module;\nmethod arguments should be ordered based on the amount of usage within the method body;\nmethods extended from other modules must follow their inherited argument order, not the above rule;\nexplicit return should be preferred except in short-form method definitions;\navoid dense expressions where possible e.g. prefer nested ifs over complex nested ?s;\ninclude a trailing , in vectors, tuples, or method calls that span several lines;\ndo not use multiline comments (#= and =#);\nwrap long lines as near to 92 characters as possible, this includes docstrings;\nfollow the standard naming conventions used in Base.","category":"page"},{"location":"contributing/#Markdown","page":"Contributing","title":"Markdown","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Use unbalanced # headers, i.e. no # on the right hand side of the header text;\ninclude a single blank line between toplevel blocks;\nunordered lists must use * bullets with two preceding spaces;\ndo not hard wrap lines;\nuse emphasis (*) and bold (**) sparingly;\nalways use fenced code blocks instead of indented blocks;\nfollow the conventions outlined in the Julia documentation page on documentation.","category":"page"},{"location":"lib/internals/writers/#Writers","page":"Writers","title":"Writers","text":"","category":"section"},{"location":"lib/internals/writers/","page":"Writers","title":"Writers","text":"Modules = [\n    Documenter.Writers,\n    Documenter.Writers.MarkdownWriter,\n    Documenter.Writers.HTMLWriter,\n    Documenter.Writers.HTMLWriter.RD,\n    Documenter.Writers.LaTeXWriter,\n]","category":"page"},{"location":"lib/internals/writers/","page":"Writers","title":"Writers","text":"Documenter.Plugin","category":"page"},{"location":"man/guide/#Package-Guide","page":"Guide","title":"Package Guide","text":"","category":"section"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"Documenter is designed to do one thing – combine markdown files and inline docstrings from Julia's docsystem into a single inter-linked document. What follows is a step-by-step guide to creating a simple document.","category":"page"},{"location":"man/guide/#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"Documenter can be installed using the Julia package manager. From the Julia REPL, type ] to enter the Pkg REPL mode and run","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"pkg> add Documenter","category":"page"},{"location":"man/guide/#Setting-up-the-Folder-Structure","page":"Guide","title":"Setting up the Folder Structure","text":"","category":"section"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"note: Note\nThe function DocumenterTools.generate from the DocumenterTools package can generate the basic structure that Documenter expects.","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"Firstly, we need a Julia module to document. This could be a package generated via PkgDev.generate or a single .jl script accessible via Julia's LOAD_PATH. For this guide we'll be using a package called Example.jl that has the following directory layout:","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"Example/\n├── src/\n│   └── Example.jl\n...","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"Note that the ... just represent unimportant files and folders.","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"We must decide on a location where we'd like to store the documentation for this package. It's recommended to use a folder named docs/ in the toplevel of the package, like so","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"Example/\n├── docs/\n│   └── ...\n├── src/\n│   └── Example.jl\n...","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"Inside the docs/ folder we need to add two things. A source folder which will contain the markdown files that will be used to build the finished document and a Julia script that will be used to control the build process. The following names are recommended","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"docs/\n├── src/\n└── make.jl","category":"page"},{"location":"man/guide/#Building-an-Empty-Document","page":"Guide","title":"Building an Empty Document","text":"","category":"section"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"With our docs/ directory now setup we're going to build our first document. It'll just be a single empty file at the moment, but we'll be adding to it later on.","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"Add the following to your make.jl file","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"using Documenter, Example\n\nmakedocs(sitename=\"My Documentation\")","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"This assumes you've installed Documenter as discussed in Installation and that your Example.jl package can be found by Julia.","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"note: Note\nIf your source directory is not accessible through Julia's LOAD_PATH, you might wish to add the following line at the top of make.jlpush!(LOAD_PATH,\"../src/\")","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"Now add an index.md file to the src/ directory.","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"note: Note\nIf you use Documenter's default HTML output the name index.md is mandatory. This file will be the main page of the rendered HTML documentation.","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"Leave the newly added file empty and then run the following command from the docs/ directory","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"$ julia make.jl","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"Note that $ just represents the prompt character. You don't need to type that.","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"If you'd like to see the output from this command in color use","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"$ julia --color=yes make.jl","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"When you run that you should see the following output","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"[ Info: SetupBuildDirectory: setting up build directory.\n[ Info: Doctest: running doctests.\n[ Info: ExpandTemplates: expanding markdown templates.\n[ Info: CrossReferences: building cross-references.\n[ Info: CheckDocument: running document checks.\n[ Info: Populate: populating indices.\n[ Info: RenderDocument: rendering document.\n[ Info: HTMLWriter: rendering HTML pages.","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"The docs/ folder should contain a new directory – called build/. Its structure should look like the following","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"build/\n├── assets\n│   ├── documenter.js\n│   ├── search.js\n│   ├── themes\n│   │   ├── documenter-dark.css\n│   │   └── documenter-light.css\n│   ├── themeswap.js\n│   └── warner.js\n├── index.html\n├── search\n│   └── index.html\n└── search_index.js","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"note: Note\nBy default, Documenter has pretty URLs enabled, which means that src/foo.md is turned into src/foo/index.html, instead of simply src/foo.html, which is the preferred way when creating a set of HTML to be hosted on a web server.However, this can be a hindrance when browsing the documentation locally as browsers do not resolve directory URLs like foo/ to foo/index.html for local files. You have two options:You can run a local web server out of the docs/build directory. One way to accomplish this is to install the LiveServer Julia package. You can then start the server with julia -e 'using LiveServer; serve(dir=\"docs/build\")'. Alternatively, if you have Python installed, you can start one with python3 -m http.server --bind localhost (or python -m SimpleHTTPServer with Python 2).\nYou can disable the pretty URLs feature by passing prettyurls = false with the Documenter.HTML plugin:\nmakedocs(..., format = Documenter.HTML(prettyurls = false))\nAlternatively, if your goal is to eventually set up automatic documentation deployment with e.g. Travis CI or GitHub Actions (see Hosting Documentation), you can also use their environment variables to determine Documenter's behavior in make.jl on the fly:\nmakedocs(...,\n    format = Documenter.HTML(\n        prettyurls = get(ENV, \"CI\", nothing) == \"true\"\n    )\n)","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"warning: Warning\nNever git commit the contents of build (or any other content generated by Documenter) to your repository's master branch. Always commit generated files to the gh-pages branch of your repository. This helps to avoid including unnecessary changes for anyone reviewing commits that happen to include documentation changes.See the Hosting Documentation section for details regarding how you should go about setting this up correctly.","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"At this point build/index.html should be an empty page since src/index.md is empty. You can try adding some text to src/index.md and re-running the make.jl file to see the changes.","category":"page"},{"location":"man/guide/#Adding-Some-Docstrings","page":"Guide","title":"Adding Some Docstrings","text":"","category":"section"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"Next we'll splice a docstring defined in the Example module into the index.md file. To do this first document a function in that module:","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"module Example\n\nexport func\n\n\"\"\"\n    func(x)\n\nReturns double the number `x` plus `1`.\n\"\"\"\nfunc(x) = 2x + 1\n\nend","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"Then in the src/index.md file add the following","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"# Example.jl Documentation\n\n```@docs\nfunc(x)\n```","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"When we next run make.jl the docstring for Example.func(x) should appear in place of the @docs block in build/index.md. Note that more than one object can be referenced inside a @docs block – just place each one on a separate line.","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"Note that a @docs block is evaluated in the Main module. This means that each object listed in the block must be visible there. The module can be changed to something else on a per-page basis with a @meta block as in the following","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"# Example.jl Documentation\n\n```@meta\nCurrentModule = Example\n```\n\n```@docs\nfunc(x)\n```","category":"page"},{"location":"man/guide/#Filtering-included-docstrings","page":"Guide","title":"Filtering included docstrings","text":"","category":"section"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"In some cases you may want to include a docstring for a Method that extends a Function from a different module – such as Base. In the following example we extend Base.length with a new definition for the struct T and also add a docstring:","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"struct T\n    # ...\nend\n\n\"\"\"\nCustom `length` docs for `T`.\n\"\"\"\nBase.length(::T) = 1","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"When trying to include this docstring with","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"```@docs\nlength\n```","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"all the docs for length will be included – even those from other modules. There are two ways to solve this problem. Either include the type in the signature with","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"```@docs\nlength(::T)\n```","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"or declare the specific modules that makedocs should include with","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"makedocs(\n    # options\n    modules = [MyModule]\n)","category":"page"},{"location":"man/guide/#Cross-Referencing","page":"Guide","title":"Cross Referencing","text":"","category":"section"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"It may be necessary to refer to a particular docstring or section of your document from elsewhere in the document. To do this we can make use of Documenter's cross-referencing syntax which looks pretty similar to normal markdown link syntax. Replace the contents of src/index.md with the following","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"# Example.jl Documentation\n\n```@docs\nfunc(x)\n```\n\n- link to [Example.jl Documentation](@ref)\n- link to [`func(x)`](@ref)","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"So we just have to replace each link's url with @ref and write the name of the thing we'd link to cross-reference. For document headers it's just plain text that matches the name of the header and for docstrings enclose the object in backticks.","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"This also works across different pages in the same way. Note that these sections and docstrings must be unique within a document.","category":"page"},{"location":"man/guide/#Navigation","page":"Guide","title":"Navigation","text":"","category":"section"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"Documenter can auto-generate tables of contents and docstring indexes for your document with the following syntax. We'll illustrate these features using our index.md file from the previous sections. Add the following to that file","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"# Example.jl Documentation\n\n```@contents\n```\n\n## Functions\n\n```@docs\nfunc(x)\n```\n\n## Index\n\n```@index\n```","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"The @contents block will generate a nested list of links to all the section headers in the document. By default it will gather all the level 1 and 2 headers from every page in the document, but this can be adjusted using Pages and Depth settings as in the following","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"```@contents\nPages = [\"foo.md\", \"bar.md\"]\nDepth = 3\n```","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"The @index block will generate a flat list of links to all the docs that that have been spliced into the document using @docs blocks. As with the @contents block the pages to be included can be set with a Pages = [...] line. Since the list is not nested Depth is not supported for @index.","category":"page"},{"location":"man/guide/#Pages-in-the-Sidebar","page":"Guide","title":"Pages in the Sidebar","text":"","category":"section"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"By default all the pages (.md files) in your source directory get added to the sidebar, sorted by their filenames. However, in most cases you want to use the pages argument to makedocs to control how the sidebar looks like. The basic usage is as follows:","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"makedocs(\n    ...,\n    pages = [\n        \"page.md\",\n        \"Page title\" => \"page2.md\",\n        \"Subsection\" => [\n            ...\n        ]\n    ]\n)","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"Using the pages argument you can organize your pages into subsections and hide some pages from the sidebar with the help of the hide functions.","category":"page"},{"location":"man/guide/#Adding-a-logo-or-icon","page":"Guide","title":"Adding a logo or icon","text":"","category":"section"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"You can easily add a logo or icon to your documentation which will be automatically displayed in the navigation sidebar.","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"During the build process, Documenter looks for suitable graphic images in the src/assets/ directory and automatically copies them to /build/assets/.","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"You can use SVG, PNG, WEBP, GIF, or JPEG images. ","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"Documenter looks for files logo.svg, logo.png, logo.webp, logo.gif, logo.jpg, or logo.jpeg, in that order. The first suitable image found is used.","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"This image will be used for both light and dark themes. If you want to create a separate design for the dark theme, add a file called logo-dark.svg (or PNG/WEBP/GIF/JPEG).","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"Files don't need to be square. Images with transparent backgrounds can look better, particularly for dark themes.","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"There's a sidebar_sitename keyword option for  Documenter.HTML that lets you hide the sitename that's usually displayed below a logo. This is useful if the logo already contains the name.","category":"page"},{"location":"lib/public/#Public-Documentation","page":"Public","title":"Public Documentation","text":"","category":"section"},{"location":"lib/public/","page":"Public","title":"Public","text":"Documentation for Documenter.jl's public interface.","category":"page"},{"location":"lib/public/","page":"Public","title":"Public","text":"See the Internals section of the manual for internal package docs covering all submodules.","category":"page"},{"location":"lib/public/#Contents","page":"Public","title":"Contents","text":"","category":"section"},{"location":"lib/public/","page":"Public","title":"Public","text":"Pages = [\"public.md\"]","category":"page"},{"location":"lib/public/#Index","page":"Public","title":"Index","text":"","category":"section"},{"location":"lib/public/","page":"Public","title":"Public","text":"Pages = [\"public.md\"]","category":"page"},{"location":"lib/public/#Public-Interface","page":"Public","title":"Public Interface","text":"","category":"section"},{"location":"lib/public/","page":"Public","title":"Public","text":"Documenter\nmakedocs\nhide\nasset\ndeploydocs\nDeps\nDeps.pip\ndoctest\nDocMeta\nDocMeta.getdocmeta\nDocMeta.setdocmeta!","category":"page"},{"location":"lib/public/#DocumenterTools","page":"Public","title":"DocumenterTools","text":"","category":"section"},{"location":"lib/public/","page":"Public","title":"Public","text":"DocumenterTools.generate\nDocumenterTools.genkeys\nDocumenterTools.OutdatedWarning.generate","category":"page"},{"location":"lib/internals/mdflatten/#MDFlatten","page":"MDFlatten","title":"MDFlatten","text":"","category":"section"},{"location":"lib/internals/mdflatten/","page":"MDFlatten","title":"MDFlatten","text":"Modules = [Documenter.Utilities.MDFlatten]","category":"page"},{"location":"man/examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"man/examples/","page":"Examples","title":"Examples","text":"Sometimes the best way to learn how to use a new package is to look for examples of what others have already built with it.","category":"page"},{"location":"man/examples/","page":"Examples","title":"Examples","text":"The following packages use Documenter to build their documentation and so should give a good overview of what this package is currently able to do.","category":"page"},{"location":"man/examples/","page":"Examples","title":"Examples","text":"note: Note\nPackages are listed alphabetically. If you have a package that uses Documenter then please open a PR that adds it to the appropriate list below; a simple way to do so is to navigate to https://github.com/JuliaDocs/Documenter.jl/edit/master/docs/src/man/examples.md.The make.jl file for all listed packages will be tested to check for potential regressions prior to tagging new Documenter releases whenever possible.","category":"page"},{"location":"man/examples/#Registered","page":"Examples","title":"Registered","text":"","category":"section"},{"location":"man/examples/","page":"Examples","title":"Examples","text":"Packages that have tagged versions available in the general Registry:","category":"page"},{"location":"man/examples/","page":"Examples","title":"Examples","text":"Augmentor.jl\nBanditOpt.jl\nBeaData.jl\nBio.jl\nControlSystems.jl\nCOSMO.jl\nDiscretePredictors.jl\nDocumenter.jl\nDrWatson\nEvolvingGraphs.jl\nExtractMacro.jl\nEzXML.jl\nFourierFlows.jl\nGadfly.jl\nGeophysicalFlows.jl\nGeoStats.jl\nHighlights.jl\nLuxor.jl\nMergedMethods.jl\nMimi.jl\nNumericSuffixes.jl\nNLOptControl.jl\nOhMyREPL.jl\nOnlineStats.jl\nPOMDPs.jl\nPhyloNetworks.jl\nPrivateModules.jl\nQuery.jl\nSimGBS.jl\nTaylorSeries.jl\nWeave.jl","category":"page"},{"location":"man/examples/#Documentation-repositories","page":"Examples","title":"Documentation repositories","text":"","category":"section"},{"location":"man/examples/","page":"Examples","title":"Examples","text":"Some projects or organizations maintain dedicated documentation repositories that are separate from specific packages.","category":"page"},{"location":"man/examples/","page":"Examples","title":"Examples","text":"DifferentialEquations.jl\nJuliaDocs landing page\nJuliaImages\nJuliaMusic\nPlots.jl","category":"page"},{"location":"lib/internals/jsdependencies/#JSDependencies","page":"JSDependencies","title":"JSDependencies","text":"","category":"section"},{"location":"lib/internals/jsdependencies/","page":"JSDependencies","title":"JSDependencies","text":"Modules = [Documenter.Utilities.JSDependencies]","category":"page"},{"location":"lib/internals/documents/#Documents","page":"Documents","title":"Documents","text":"","category":"section"},{"location":"lib/internals/documents/","page":"Documents","title":"Documents","text":"Modules = [Documenter.Documents]","category":"page"},{"location":"lib/internals/docchecks/#DocChecks","page":"DocChecks","title":"DocChecks","text":"","category":"section"},{"location":"lib/internals/docchecks/","page":"DocChecks","title":"DocChecks","text":"Modules = [Documenter.DocChecks]","category":"page"},{"location":"lib/internals/markdown2/#Markdown2","page":"Markdown2","title":"Markdown2","text":"","category":"section"},{"location":"lib/internals/markdown2/","page":"Markdown2","title":"Markdown2","text":"Documentation for the private Markdown2 module.","category":"page"},{"location":"lib/internals/markdown2/#Index","page":"Markdown2","title":"Index","text":"","category":"section"},{"location":"lib/internals/markdown2/","page":"Markdown2","title":"Markdown2","text":"Pages = [\"markdown2.md\"]","category":"page"},{"location":"lib/internals/markdown2/#Docstrings","page":"Markdown2","title":"Docstrings","text":"","category":"section"},{"location":"lib/internals/markdown2/","page":"Markdown2","title":"Markdown2","text":"Modules = [Documenter.Utilities.Markdown2]","category":"page"},{"location":"lib/internals/utilities/#Utilities","page":"Utilities","title":"Utilities","text":"","category":"section"},{"location":"lib/internals/utilities/","page":"Utilities","title":"Utilities","text":"Modules = [Documenter.Utilities]","category":"page"},{"location":"lib/internals/cross-references/#CrossReferences","page":"CrossReferences","title":"CrossReferences","text":"","category":"section"},{"location":"lib/internals/cross-references/","page":"CrossReferences","title":"CrossReferences","text":"Modules = [Documenter.CrossReferences]","category":"page"},{"location":"lib/internals/documentertools/#DocumenterTools","page":"DocumenterTools","title":"DocumenterTools","text":"","category":"section"},{"location":"lib/internals/documentertools/","page":"DocumenterTools","title":"DocumenterTools","text":"DocumenterTools.package_devpath","category":"page"},{"location":"lib/internals/documentertools/#Generator","page":"DocumenterTools","title":"Generator","text":"","category":"section"},{"location":"lib/internals/documentertools/","page":"DocumenterTools","title":"DocumenterTools","text":"Modules = [DocumenterTools.Generator]","category":"page"},{"location":"lib/internals/documentertools/#Themes","page":"DocumenterTools","title":"Themes","text":"","category":"section"},{"location":"lib/internals/documentertools/","page":"DocumenterTools","title":"DocumenterTools","text":"warning: Experimental API\nThe theming API in DocumenterTools is very experimental and may change without notice.","category":"page"},{"location":"lib/internals/documentertools/","page":"DocumenterTools","title":"DocumenterTools","text":"Modules = [DocumenterTools.Themes]","category":"page"},{"location":"man/other-formats/#Other-Output-Formats","page":"Other Output Formats","title":"Other Output Formats","text":"","category":"section"},{"location":"man/other-formats/","page":"Other Output Formats","title":"Other Output Formats","text":"In addition to the default native HTML output, Documenter also provides a built-in LaTeX-based PDF output. Additional output formats are provided through plugin packages. Once the corresponding package is loaded, the output format can be specified using the format option in makedocs.","category":"page"},{"location":"man/other-formats/#pdf-output","page":"Other Output Formats","title":"PDF Output via LaTeX","text":"","category":"section"},{"location":"man/other-formats/","page":"Other Output Formats","title":"Other Output Formats","text":"makedocs can be switched over to use the PDF/LaTeX backend by passing a Documenter.LaTeX object as the format keyword:","category":"page"},{"location":"man/other-formats/","page":"Other Output Formats","title":"Other Output Formats","text":"using Documenter\nmakedocs(format = Documenter.LaTeX(), ...)","category":"page"},{"location":"man/other-formats/","page":"Other Output Formats","title":"Other Output Formats","text":"Documenter will then generate a PDF file of the documentation using LaTeX, which will be placed in the output (build/) directory.","category":"page"},{"location":"man/other-formats/","page":"Other Output Formats","title":"Other Output Formats","text":"The makedocs argument sitename will be used for the \\title field in the tex document, and if the build is for a release tag (i.e. when the \"TRAVIS_TAG\" environment variable is set) the version number will be appended to the title. The makedocs argument authors should also be specified, it will be used for the \\authors field in the tex document.","category":"page"},{"location":"man/other-formats/#Compiling-using-natively-installed-latex","page":"Other Output Formats","title":"Compiling using natively installed latex","text":"","category":"section"},{"location":"man/other-formats/","page":"Other Output Formats","title":"Other Output Formats","text":"The following is required to build the documentation:","category":"page"},{"location":"man/other-formats/","page":"Other Output Formats","title":"Other Output Formats","text":"You need pdflatex and latexmk commands to be installed and available to Documenter.\nYou need the minted LaTeX package and its backend source highlighter Pygments installed.\nYou need the DejaVu Sans and DejaVu Sans Mono fonts installed.","category":"page"},{"location":"man/other-formats/#Compiling-using-docker-image","page":"Other Output Formats","title":"Compiling using docker image","text":"","category":"section"},{"location":"man/other-formats/","page":"Other Output Formats","title":"Other Output Formats","text":"It is also possible to use a prebuilt docker image to compile the .tex file. The image contains all of the required installs described in the section above. The only requirement for using the image is that docker is installed and available for the builder to call. You also need to tell Documenter to use the docker image, instead of natively installed tex which is the default. This is done with the LaTeX specifier:","category":"page"},{"location":"man/other-formats/","page":"Other Output Formats","title":"Other Output Formats","text":"using DocumenterLaTeX\nmakedocs(\n    format = LaTeX(platform = \"docker\"),\n    ...\n)","category":"page"},{"location":"man/other-formats/","page":"Other Output Formats","title":"Other Output Formats","text":"If you build the documentation on Travis you need to add","category":"page"},{"location":"man/other-formats/","page":"Other Output Formats","title":"Other Output Formats","text":"services:\n  - docker","category":"page"},{"location":"man/other-formats/","page":"Other Output Formats","title":"Other Output Formats","text":"to your .travis.yml file.","category":"page"},{"location":"man/other-formats/#Compiling-to-LaTeX-only","page":"Other Output Formats","title":"Compiling to LaTeX only","text":"","category":"section"},{"location":"man/other-formats/","page":"Other Output Formats","title":"Other Output Formats","text":"There's a possibility to save only the .tex file and skip the PDF compilation. For this purpose use the platform=\"none\" keyword:","category":"page"},{"location":"man/other-formats/","page":"Other Output Formats","title":"Other Output Formats","text":"using DocumenterLaTeX\nmakedocs(\n    format = LaTeX(platform = \"none\"),\n    ...\n)","category":"page"},{"location":"man/other-formats/#Markdown-and-MkDocs","page":"Other Output Formats","title":"Markdown & MkDocs","text":"","category":"section"},{"location":"man/other-formats/","page":"Other Output Formats","title":"Other Output Formats","text":"Markdown output requires the DocumenterMarkdown package to be available and loaded. For Travis setups, add the package to the docs/Project.toml environment as a dependency. You also need to import the package in make.jl:","category":"page"},{"location":"man/other-formats/","page":"Other Output Formats","title":"Other Output Formats","text":"using DocumenterMarkdown","category":"page"},{"location":"man/other-formats/","page":"Other Output Formats","title":"Other Output Formats","text":"When DocumenterMarkdown is loaded, you can specify format = Markdown() in makedocs. Documenter will then output a set of Markdown files to the build directory that can then further be processed with MkDocs into HTML pages.","category":"page"},{"location":"man/other-formats/","page":"Other Output Formats","title":"Other Output Formats","text":"MkDocs, of course, is not the only option you have – any markdown to HTML converter should work fine with some amount of setting up.","category":"page"},{"location":"man/other-formats/","page":"Other Output Formats","title":"Other Output Formats","text":"note: Note\nMarkdown output used to be the default option (i.e. when leaving the format option unspecified). The default now is the HTML output.","category":"page"},{"location":"man/other-formats/#The-MkDocs-mkdocs.yml-file","page":"Other Output Formats","title":"The MkDocs mkdocs.yml file","text":"","category":"section"},{"location":"man/other-formats/","page":"Other Output Formats","title":"Other Output Formats","text":"A MkDocs build is controlled by the mkdocs.yml configuration file. Add the file with the following content to the docs/ directory:","category":"page"},{"location":"man/other-formats/","page":"Other Output Formats","title":"Other Output Formats","text":"site_name:        PACKAGE_NAME.jl\nrepo_url:         https://github.com/USER_NAME/PACKAGE_NAME.jl\nsite_description: Description...\nsite_author:      USER_NAME\n\ntheme: readthedocs\n\nextra_css:\n  - assets/Documenter.css\n\nextra_javascript:\n  - https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS_HTML\n  - assets/mathjaxhelper.js\n\nmarkdown_extensions:\n  - extra\n  - tables\n  - fenced_code\n  - mdx_math\n\ndocs_dir: 'build'\n\npages:\n  - Home: index.md","category":"page"},{"location":"man/other-formats/","page":"Other Output Formats","title":"Other Output Formats","text":"If you have run Documenter and it has generated a build/ directory, you can now try running mkdocs build – this should now generate the site/ directory. You should also add the docs/site/ directory into your .gitignore file, which should now look like:","category":"page"},{"location":"man/other-formats/","page":"Other Output Formats","title":"Other Output Formats","text":"docs/build/\ndocs/site/","category":"page"},{"location":"man/other-formats/","page":"Other Output Formats","title":"Other Output Formats","text":"This is only a basic skeleton. Read through the MkDocs documentation if you would like to know more about the available settings.","category":"page"},{"location":"man/other-formats/#Deployment-with-MkDocs","page":"Other Output Formats","title":"Deployment with MkDocs","text":"","category":"section"},{"location":"man/other-formats/","page":"Other Output Formats","title":"Other Output Formats","text":"To deploy MkDocs on Travis, you also need to provide additional keyword arguments to deploydocs. Your deploydocs call should look something like","category":"page"},{"location":"man/other-formats/","page":"Other Output Formats","title":"Other Output Formats","text":"deploydocs(\n    repo   = \"github.com/USER_NAME/PACKAGE_NAME.jl.git\",\n    deps   = Deps.pip(\"mkdocs\", \"pygments\", \"python-markdown-math\"),\n    make   = () -> run(`mkdocs build`)\n    target = \"site\"\n)","category":"page"},{"location":"man/other-formats/","page":"Other Output Formats","title":"Other Output Formats","text":"deps serves to provide the required Python dependencies to build the documentation\nmake specifies the function that calls mkdocs to perform the second build step\ntarget, which specified which files get copied to gh-pages, needs to point to the site/ directory","category":"page"},{"location":"man/other-formats/","page":"Other Output Formats","title":"Other Output Formats","text":"In the example above we include the dependencies mkdocs and python-markdown-math. The former makes sure that MkDocs is installed to deploy the documentation, and the latter provides the mdx_math markdown extension to exploit MathJax rendering of latex equations in markdown. Other dependencies should be included here.","category":"page"},{"location":"man/other-formats/#\\LaTeX:-MkDocs-and-MathJax","page":"Other Output Formats","title":"LaTeX: MkDocs and MathJax","text":"","category":"section"},{"location":"man/other-formats/","page":"Other Output Formats","title":"Other Output Formats","text":"To get MkDocs to display LaTeX equations correctly we need to update several of this configuration files described in the Package Guide.","category":"page"},{"location":"man/other-formats/","page":"Other Output Formats","title":"Other Output Formats","text":"docs/make.jl should add the python-markdown-math dependency to allow for equations to be rendered correctly.","category":"page"},{"location":"man/other-formats/","page":"Other Output Formats","title":"Other Output Formats","text":"# ...\n\ndeploydocs(\n    deps = Deps.pip(\"pygments\", \"mkdocs\", \"python-markdown-math\"),\n    # ...\n)","category":"page"},{"location":"man/other-formats/","page":"Other Output Formats","title":"Other Output Formats","text":"This package should also be installed locally so that you can preview the generated documentation prior to pushing new commits to a repository.","category":"page"},{"location":"man/other-formats/","page":"Other Output Formats","title":"Other Output Formats","text":"$ pip install python-markdown-math","category":"page"},{"location":"man/other-formats/","page":"Other Output Formats","title":"Other Output Formats","text":"The docs/mkdocs.yml file must add the python-markdown-math extension, called mdx_math, as well as two MathJax JavaScript files:","category":"page"},{"location":"man/other-formats/","page":"Other Output Formats","title":"Other Output Formats","text":"# ...\nmarkdown_extensions:\n  - mdx_math\n  # ...\n\nextra_javascript:\n  - https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS_HTML\n  - assets/mathjaxhelper.js\n# ...","category":"page"},{"location":"man/other-formats/","page":"Other Output Formats","title":"Other Output Formats","text":"Final Remarks","category":"page"},{"location":"man/other-formats/","page":"Other Output Formats","title":"Other Output Formats","text":"Following this guide and adding the necessary changes to the configuration files should enable properly rendered mathematical equations within your documentation both locally and when built and deployed using the Travis built service.","category":"page"},{"location":"man/latex/#latex_syntax","page":"LaTeX Syntax","title":"LaTeX Syntax","text":"","category":"section"},{"location":"man/latex/","page":"LaTeX Syntax","title":"LaTeX Syntax","text":"The following section describes how to add equations written using LaTeX to your documentation.","category":"page"},{"location":"man/latex/#Escaping-Characters-in-Docstrings","page":"LaTeX Syntax","title":"Escaping Characters in Docstrings","text":"","category":"section"},{"location":"man/latex/","page":"LaTeX Syntax","title":"LaTeX Syntax","text":"Since some characters used in LaTeX syntax, such as $ and \\, are treated differently in docstrings. They need to be escaped using a \\ character as in the following example:","category":"page"},{"location":"man/latex/","page":"LaTeX Syntax","title":"LaTeX Syntax","text":"\"\"\"\nHere's some inline maths: ``\\\\sqrt[n]{1 + x + x^2 + \\\\ldots}``.\n\nHere's an equation:\n\n``\\\\frac{n!}{k!(n - k)!} = \\\\binom{n}{k}``\n\nThis is the binomial coefficient.\n\"\"\"\nfunc(x) = # ...","category":"page"},{"location":"man/latex/","page":"LaTeX Syntax","title":"LaTeX Syntax","text":"Note that for equations on the manual pages (in .md files) the escaping is not necessary. So, when moving equations between the manual and docstrings, the escaping \\ characters have to the appropriately added or removed.","category":"page"},{"location":"man/latex/","page":"LaTeX Syntax","title":"LaTeX Syntax","text":"To avoid needing to escape the special characters in docstrings the raw\"\" string macro can be used, combined with @doc:","category":"page"},{"location":"man/latex/","page":"LaTeX Syntax","title":"LaTeX Syntax","text":"@doc raw\"\"\"\nHere's some inline maths: ``\\sqrt[n]{1 + x + x^2 + \\ldots}``.\n\nHere's an equation:\n\n``\\frac{n!}{k!(n - k)!} = \\binom{n}{k}``\n\nThis is the binomial coefficient.\n\"\"\"\nfunc(x) = # ...","category":"page"},{"location":"man/latex/","page":"LaTeX Syntax","title":"LaTeX Syntax","text":"A related issue is how to add dollar signs to a docstring. They need to be double-escaped as follows:","category":"page"},{"location":"man/latex/","page":"LaTeX Syntax","title":"LaTeX Syntax","text":"\"\"\"\nThe cost was \\\\\\$1.\n\"\"\"","category":"page"},{"location":"man/latex/#Inline-Equations","page":"LaTeX Syntax","title":"Inline Equations","text":"","category":"section"},{"location":"man/latex/","page":"LaTeX Syntax","title":"LaTeX Syntax","text":"Here's some inline maths: ``\\sqrt[n]{1 + x + x^2 + \\ldots}``.","category":"page"},{"location":"man/latex/","page":"LaTeX Syntax","title":"LaTeX Syntax","text":"which will be displayed as","category":"page"},{"location":"man/latex/","page":"LaTeX Syntax","title":"LaTeX Syntax","text":"","category":"page"},{"location":"man/latex/","page":"LaTeX Syntax","title":"LaTeX Syntax","text":"Here's some inline maths: sqrtn1 + x + x^2 + ldots.","category":"page"},{"location":"man/latex/","page":"LaTeX Syntax","title":"LaTeX Syntax","text":"","category":"page"},{"location":"man/latex/#Display-Equations","page":"LaTeX Syntax","title":"Display Equations","text":"","category":"section"},{"location":"man/latex/","page":"LaTeX Syntax","title":"LaTeX Syntax","text":"Here's an equation:\n\n```math\n\\frac{n!}{k!(n - k)!} = \\binom{n}{k}\n```\n\nThis is the binomial coefficient.\n\n---\n\nTo write a system of equations, use the `aligned` environment:\n\n```math\n\\begin{aligned}\n\\nabla\\cdot\\mathbf{E}  &= 4 \\pi \\rho \\\\\n\\nabla\\cdot\\mathbf{B}  &= 0 \\\\\n\\nabla\\times\\mathbf{E} &= - \\frac{1}{c} \\frac{\\partial\\mathbf{B}}{\\partial t} \\\\\n\\nabla\\times\\mathbf{B} &= - \\frac{1}{c} \\left(4 \\pi \\mathbf{J} + \\frac{\\partial\\mathbf{E}}{\\partial t} \\right)\n\\end{aligned}\n```\n\nThese are Maxwell's equations.\n","category":"page"},{"location":"man/latex/","page":"LaTeX Syntax","title":"LaTeX Syntax","text":"which will be displayed as","category":"page"},{"location":"man/latex/","page":"LaTeX Syntax","title":"LaTeX Syntax","text":"","category":"page"},{"location":"man/latex/","page":"LaTeX Syntax","title":"LaTeX Syntax","text":"Here's an equation:","category":"page"},{"location":"man/latex/","page":"LaTeX Syntax","title":"LaTeX Syntax","text":"fracnk(n - k) = binomnk","category":"page"},{"location":"man/latex/","page":"LaTeX Syntax","title":"LaTeX Syntax","text":"This is the binomial coefficient.","category":"page"},{"location":"man/latex/","page":"LaTeX Syntax","title":"LaTeX Syntax","text":"","category":"page"},{"location":"man/latex/","page":"LaTeX Syntax","title":"LaTeX Syntax","text":"To write a system of equations, use the aligned environment:","category":"page"},{"location":"man/latex/","page":"LaTeX Syntax","title":"LaTeX Syntax","text":"beginaligned\nnablacdotmathbfE  = 4 pi rho \nnablacdotmathbfB  = 0 \nnablatimesmathbfE = - frac1c fracpartialmathbfBpartial t \nnablatimesmathbfB = - frac1c left(4 pi mathbfJ + fracpartialmathbfEpartial t right)\nendaligned","category":"page"},{"location":"man/latex/","page":"LaTeX Syntax","title":"LaTeX Syntax","text":"These are Maxwell's equations.","category":"page"},{"location":"lib/internals/selectors/#Selectors","page":"Selectors","title":"Selectors","text":"","category":"section"},{"location":"lib/internals/selectors/","page":"Selectors","title":"Selectors","text":"Modules = [Documenter.Selectors]","category":"page"},{"location":"showcase/#Showcase","page":"Showcase","title":"Showcase","text":"","category":"section"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"This page showcases the various page elements that are supported by Documenter. It should be read side-by-side with its source (docs/src/showcase.md) to see what syntax exactly is used to create the various elements.","category":"page"},{"location":"showcase/#Table-of-contents","page":"Showcase","title":"Table of contents","text":"","category":"section"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"A table of contents can be generated with an @contents block. The one for this page renders as","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"Pages = [\"showcase.md\"]","category":"page"},{"location":"showcase/#Basic-Markdown","page":"Showcase","title":"Basic Markdown","text":"","category":"section"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"Documenter can render all the Markdown syntax supported by the Julia Markdown parser. You can use all the usual markdown syntax, such as bold text and italic text and print(\"inline code\").","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"Code blocks are rendered as follows:","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"This is an non-highlighted code block.\n... Rendered in monospace.","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"When the language is specified for the block, e.g. by starting the block with ```julia, the contents gets highlighted appropriately (for the language that are supported by the highlighter).","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"function foo(x::Integer)\n    @show x + 1\nend","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"For mathematics, both inline and display equations are available. Inline equations should be written as LaTeX between two backticks, e.g. ``A x^2 + B x + C = 0``. It will render as A x^2 + B x + C = 0.","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"The LaTeX for display equations must be wrapped in a ```math code block and will render like","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"x_12 = frac-B pm sqrtB^2 - 4 A C2A","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"By default, the HTML output renders equations with KaTeX, but MathJax can optionally be used as well.","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"Finally, admonitions for notes, warnings and such:","category":"page"},{"location":"showcase/#Note-admonition","page":"Showcase","title":"Note admonition","text":"","category":"section"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"note: 'note' admonition\nAdmonitions look like this. This is a !!! note-type admonition.Note that admonitions themselves can contain other block-level elements too, such as code blocks. E.g.f(x) = x^2However, you can not have at-blocks, docstrings, doctests etc. in an admonition.Headings are OK though:Heading 1Heading 2Heading 3Heading 4Heading 5Heading 6","category":"page"},{"location":"showcase/#Info-admonition","page":"Showcase","title":"Info admonition","text":"","category":"section"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"info: 'info' admonition\nThis is a !!! info-type admonition. This is the same as a !!! note-type.","category":"page"},{"location":"showcase/#Tip-admonition","page":"Showcase","title":"Tip admonition","text":"","category":"section"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"tip: 'tip' admonition\nThis is a !!! tip-type admonition.","category":"page"},{"location":"showcase/#Warning-admonition","page":"Showcase","title":"Warning admonition","text":"","category":"section"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"warning: 'warning' admonition\nThis is a !!! warning-type admonition.","category":"page"},{"location":"showcase/#Danger-admonition","page":"Showcase","title":"Danger admonition","text":"","category":"section"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"danger: 'danger' admonition\nThis is a !!! danger-type admonition.","category":"page"},{"location":"showcase/#Compat-admonition","page":"Showcase","title":"Compat admonition","text":"","category":"section"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"compat: 'compat' admonition\nThis is a !!! compat-type admonition.","category":"page"},{"location":"showcase/#Unknown-admonition-class","page":"Showcase","title":"Unknown admonition class","text":"","category":"section"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"ukw: Unknown admonition class\nAdmonition with an unknown admonition class. This is a code example.","category":"page"},{"location":"showcase/#Lists","page":"Showcase","title":"Lists","text":"","category":"section"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"Tight lists look as follows","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\nNulla quis venenatis justo.\nIn non sodales eros.","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"If the lists contain paragraphs or other block level elements, they look like this:","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"Morbi et varius nisl, eu semper orci.\nDonec vel nibh sapien. Maecenas ultricies mauris sapien. Nunc et sem ac justo ultricies dignissim ac vitae sem.\nNulla molestie aliquet metus, a dapibus ligula.\nMorbi pellentesque sodales sollicitudin. Fusce semper placerat suscipit. Aliquam semper tempus ex, non efficitur erat posuere in. Fusce at orci eu ex sagittis commodo.\nFusce tempus scelerisque egestas. Pellentesque varius nulla a varius fringilla.\nFusce nec urna eu orci porta blandit.","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"Numbered lists are also supported","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\nNulla quis venenatis justo.\nIn non sodales eros.","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"As are nested lists","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"Morbi et varius nisl, eu semper orci.\nDonec vel nibh sapien. Maecenas ultricies mauris sapien. Nunc et sem ac justo ultricies dignissim ac vitae sem.\nLorem ipsum dolor sit amet, consectetur adipiscing elit.\nNulla quis venenatis justo.\nIn non sodales eros.\nNulla molestie aliquet metus, a dapibus ligula.\nLorem ipsum dolor sit amet, consectetur adipiscing elit.\nNulla quis venenatis justo.\nIn non sodales eros.\nFusce nec urna eu orci porta blandit.","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"Lists can also be included in other blocks that can contain block level items","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"note: Bulleted lists in admonitions\nLorem ipsum dolor sit amet, consectetur adipiscing elit.\nNulla quis venenatis justo.\nIn non sodales eros.","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"note: Large lists in admonitions\nMorbi et varius nisl, eu semper orci.\nDonec vel nibh sapien. Maecenas ultricies mauris sapien. Nunc et sem ac justo ultricies dignissim ac vitae sem.\nLorem ipsum dolor sit amet, consectetur adipiscing elit.\nNulla quis venenatis justo.\nIn non sodales eros.\nNulla molestie aliquet metus, a dapibus ligula.\nLorem ipsum dolor sit amet, consectetur adipiscing elit.\nNulla quis venenatis justo.\nIn non sodales eros.\nFusce nec urna eu orci porta blandit.","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"Morbi et varius nisl, eu semper orci.\nDonec vel nibh sapien. Maecenas ultricies mauris sapien. Nunc et sem ac justo ultricies dignissim ac vitae sem.\nLorem ipsum dolor sit amet, consectetur adipiscing elit.\nNulla quis venenatis justo.\nIn non sodales eros.","category":"page"},{"location":"showcase/#Tables","page":"Showcase","title":"Tables","text":"","category":"section"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"object implemented value\nA ✓ 10.00\nBB ✓ 1000000.00","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"With explicit alignment.","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"object implemented value\nA ✓ 10.00\nBB ✓ 1000000.00","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"Tables that are too wide should become scrollable.","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"object implemented value\nA ✓ 10.00\nBBBBBBBBBBBBBBBBBBBB ✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓ 1000000000000000000000000000000000000000000000000000000.00","category":"page"},{"location":"showcase/#Footnotes","page":"Showcase","title":"Footnotes","text":"","category":"section"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"Footnote references can be added with the [^label] syntax.[1] The footnote definitions get collected at the bottom of the page.","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"The footnote label can be an arbitrary string and even consist of block-level elements.[Clarke61]","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"[1]: A footnote definition uses the [^label]: ... syntax in a block scope.","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"[Clarke61]: Any sufficiently advanced technology is indistinguishable from magic.Arthur C. Clarke, Profiles of the Future (1961): Clarke's Third Law.","category":"page"},{"location":"showcase/#Headings","page":"Showcase","title":"Headings","text":"","category":"section"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"Finally, headings render as follows","category":"page"},{"location":"showcase/#Heading-level-3","page":"Showcase","title":"Heading level 3","text":"","category":"section"},{"location":"showcase/#Heading-level-4","page":"Showcase","title":"Heading level 4","text":"","category":"section"},{"location":"showcase/#Heading-level-5","page":"Showcase","title":"Heading level 5","text":"","category":"section"},{"location":"showcase/#Heading-level-6","page":"Showcase","title":"Heading level 6","text":"","category":"section"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"To see an example of a level 1 heading see the page title and for level 2 heading, see the one just under this paragraph.","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"note: Headings in sidebars\nLevel 1 and 2 heading show up in the sidebar, for the current page.","category":"page"},{"location":"showcase/#Docstrings","page":"Showcase","title":"Docstrings","text":"","category":"section"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"The key feature of Documenter, of course, is the ability to automatically include docstrings from your package in the manual. The following example docstrings come from the demo DocumenterShowcase module, the source of which can be found in docs/DocumenterShowcase.jl.","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"To include a docstrings into a manual page, you needs to use an @docs block","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"```@docs\nDocumenterShowcase\n```","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"This will include a single docstring and it will look like this","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"DocumenterShowcase","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"You can include the docstrings corresponding to different function signatures one by one. E.g., the DocumenterShowcase.foo function has two signatures – (::Integer) and (::AbstractString).","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"```@docs\nDocumenterShowcase.foo(::Integer)\n```","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"yielding the following docstring","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"DocumenterShowcase.foo(::Integer)","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"And now, by having DocumenterShowcase.foo(::AbstractString) in the @docs block will give the other docstring","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"DocumenterShowcase.foo(::AbstractString)","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"However, if you want, you can also combine multiple docstrings into a single docstring block. The DocumenterShowcase.bar function has the same signatures as","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"If we just put DocumenterShowcase.bar in an @docs block, it will combine the docstrings as follows:","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"DocumenterShowcase.bar","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"If you have very many docstrings, you may also want to consider using the @autodocs block which can include a whole set of docstrings automatically based on certain filtering options","category":"page"},{"location":"showcase/#An-index-of-docstrings","page":"Showcase","title":"An index of docstrings","text":"","category":"section"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"The @index block can be used to generate a list of all the docstrings on a page (or even across pages) and will look as follows","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"Pages = [\"showcase.md\"]","category":"page"},{"location":"showcase/#Multiple-uses-of-the-same-symbol","page":"Showcase","title":"Multiple uses of the same symbol","text":"","category":"section"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"Sometimes a symbol has multiple docstrings, for example a type definition, inner and outer constructors. The example below shows how to use specific ones in the documentation.","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"DocumenterShowcase.Foo\nDocumenterShowcase.Foo()\nDocumenterShowcase.Foo{T}()","category":"page"},{"location":"showcase/#Doctesting-example","page":"Showcase","title":"Doctesting example","text":"","category":"section"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"Often you want to write code example such as this:","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"julia> f(x) = x^2\nf (generic function with 1 method)\n\njulia> f(3)\n9","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"If you write them as a ```jldoctest code block, Documenter can make sure that the doctest has not become outdated. See Doctests for more information.","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"Script-style doctests are supported too:","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"2 + 2\n# output\n4","category":"page"},{"location":"showcase/#Running-interactive-code","page":"Showcase","title":"Running interactive code","text":"","category":"section"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"@example block run a code snippet and insert the output into the document. E.g. the following Markdown","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"```@example\n2 + 3\n```","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"becomes the following code-output block pair","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"2 + 3","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"If the last element can be rendered as an image or text/html etc. (the corresponding Base.show method for the particular MIME type has to be defined), it will be rendered appropriately. e.g.:","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"using Main: DocumenterShowcase\nDocumenterShowcase.SVGCircle(\"000\", \"aaa\")","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"This is handy when combined with the Markdown standard library","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"using Markdown\nMarkdown.parse(\"\"\"\n`Markdown.MD` objects can be constructed dynamically on the fly and still get rendered \"natively\".\n\"\"\")","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"If the last value in an @example block is a nothing, the standard output from the blocks' evaluation gets displayed instead","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"println(\"Hello World\")","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"However, do note that if the block prints to standard output, but also has a final non-nothing value, the standard output just gets discarded:","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"println(\"Hello World\")\n42","category":"page"},{"location":"showcase/#Color-output","page":"Showcase","title":"Color output","text":"","category":"section"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"Output from @repl blocks and @example blocks support colored output, tranforming ANSI color codes to HTML.","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"compat: Julia 1.6\nColor output requires Julia 1.6 or higher. To enable color output pass ansicolor=true to Documenter.HTML.","category":"page"},{"location":"showcase/#Colored-@example-block-output","page":"Showcase","title":"Colored @example block output","text":"","category":"section"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"Input:","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"```@example\ncode_typed(sqrt, (Float64,))\n```","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"Output:","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"code_typed(sqrt, (Float64,))","category":"page"},{"location":"showcase/#Colored-@repl-block-output","page":"Showcase","title":"Colored @repl block output","text":"","category":"section"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"Input:","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"```@repl\nprintstyled(\"This should be in bold light cyan.\", color=:light_cyan, bold=true)\n```","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"Output:","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"printstyled(\"This should be in bold cyan.\", color=:cyan, bold=true)","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"Locally disabled color:","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"```@repl; ansicolor=false\nprintstyled(\"This should be in bold light cyan.\", color=:light_cyan, bold=true)\n```","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"printstyled(\"This should be in bold light cyan.\", color=:light_cyan, bold=true)","category":"page"},{"location":"showcase/#Raw-ANSI-code-output","page":"Showcase","title":"Raw ANSI code output","text":"","category":"section"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"Regardless of the color setting, when you print the ANSI escape codes directly, coloring is enabled.","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"for color in 0:15\n    print(\"\\e[38;5;$color;48;5;$(color)m  \")\n    print(\"\\e[49m\", lpad(color, 3), \" \")\n    color % 8 == 7 && println()\nend\nprint(\"\\e[m\")","category":"page"},{"location":"showcase/#REPL-type","page":"Showcase","title":"REPL-type","text":"","category":"section"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"@repl block can be used to simulate the REPL evaluation of code blocks. For example, the following block","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"```@repl\nusing Statistics\nxs = collect(1:10)\nmedian(xs)\nsum(xs)\n```","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"It gets expanded into something that looks like as if it was evaluated in the REPL, with the julia> prompt prepended etc.:","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"using Statistics\nxs = collect(1:10)\nmedian(xs)\nsum(xs)","category":"page"},{"location":"showcase/#Doctest-showcase","page":"Showcase","title":"Doctest showcase","text":"","category":"section"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"Currently exists just so that there would be doctests to run in manual pages of Documenter's manual. This page does not show up in navigation.","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"julia> 2 + 2\n4","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"The following doctests needs doctestsetup:","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"julia> Documenter.Utilities.splitexpr(:(Foo.Bar.baz))\n(:(Foo.Bar), :(:baz))","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"Let's also try @meta blocks:","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"DocTestSetup = quote\n  f(x) = x^2\nend","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"julia> f(2)\n4","category":"page"},{"location":"showcase/","page":"Showcase","title":"Showcase","text":"DocTestSetup = nothing","category":"page"},{"location":"lib/internals/expanders/#Expanders","page":"Expanders","title":"Expanders","text":"","category":"section"},{"location":"lib/internals/expanders/","page":"Expanders","title":"Expanders","text":"Modules = [Documenter.Expanders]","category":"page"},{"location":"man/doctests/#Doctests","page":"Doctests","title":"Doctests","text":"","category":"section"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"Documenter will, by default, run jldoctest code blocks that it finds and makes sure that the actual output matches what's in the doctest. This can help to avoid documentation examples from becoming outdated, incorrect, or misleading. It is recommended that as many of a package's examples as possible be runnable by Documenter's doctest.","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"This section of the manual outlines how to go about enabling doctests for code blocks in your package's documentation.","category":"page"},{"location":"man/doctests/#\"Script\"-Examples","page":"Doctests","title":"\"Script\" Examples","text":"","category":"section"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"The first, of two, types of doctests is the \"script\" code block. To make Documenter detect this kind of code block the following format must be used:","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"```jldoctest\na = 1\nb = 2\na + b\n\n# output\n\n3\n```","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"The code block's \"language\" must be jldoctest and must include a line containing exactly the text # output. The text before this line is the contents of the script that is run. The text that appears after # output is the textual representation that would be shown in the Julia REPL if the script had been included. In particular, semicolons ; at the end of a line have no effect.","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"The actual output produced by running the \"script\" is compared to the expected result and any difference will result in makedocs throwing an error and terminating.","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"Note that the amount of whitespace appearing above and below the # output line is not significant and can be increased or decreased if desired.","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"It is possible to suppress the output from the doctest by setting the output keyword argument to false, for example","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"```jldoctest; output = false\na = 1\nb = 2\na + b\n\n# output\n\n3\n```","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"Note that the output of the script will still be compared to the expected result, i.e. what is # output section, but the # output section will be suppressed in the rendered documentation.","category":"page"},{"location":"man/doctests/#REPL-Examples","page":"Doctests","title":"REPL Examples","text":"","category":"section"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"The other kind of doctest is a simulated Julia REPL session. The following format is detected by Documenter as a REPL doctest:","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"```jldoctest\njulia> a = 1\n1\n\njulia> b = 2;\n\njulia> c = 3;  # comment\n\njulia> a + b + c\n6\n```","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"As with script doctests, the code block must have it's language set to jldoctest. When a code block contains one or more julia> at the start of a line then it is assumed to be a REPL doctest. Semi-colons, ;, at the end of a line works in the same way as in the Julia REPL and will suppress the output, although the line is still evaluated.","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"Note that not all features of the REPL are supported such as shell and help modes.","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"note: Soft vs hard scope\nJulia 1.5 changed the REPL to use the soft scope when handling global variables in for loops etc. When using Documenter with Julia 1.5 or above, Documenter uses the soft scope in @repl-blocks and REPL-type doctests.","category":"page"},{"location":"man/doctests/#Exceptions","page":"Doctests","title":"Exceptions","text":"","category":"section"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"Doctests can also test for thrown exceptions and their stacktraces. Comparing of the actual and expected results is done by checking whether the expected result matches the start of the actual result. Hence, both of the following errors will match the actual result.","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"```jldoctest\njulia> div(1, 0)\nERROR: DivideError: integer division error\n in div(::Int64, ::Int64) at ./int.jl:115\n\njulia> div(1, 0)\nERROR: DivideError: integer division error\n```","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"If instead the first div(1, 0) error was written as","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"```jldoctest\njulia> div(1, 0)\nERROR: DivideError: integer division error\n in div(::Int64, ::Int64) at ./int.jl:114\n```","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"where line 115 is replaced with 114 then the doctest will fail.","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"In the second div(1, 0), where no stacktrace is shown, it may appear to the reader that it is expected that no stacktrace will actually be displayed when they attempt to try to recreate the error themselves. To indicate to readers that the output result is truncated and does not display the entire (or any of) the stacktrace you may write [...] at the line where checking should stop, i.e.","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"```jldoctest\njulia> div(1, 0)\nERROR: DivideError: integer division error\n[...]\n```","category":"page"},{"location":"man/doctests/#Preserving-Definitions-Between-Blocks","page":"Doctests","title":"Preserving Definitions Between Blocks","text":"","category":"section"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"Every doctest block is evaluated inside its own module. This means that definitions (types, variables, functions etc.) from a block can not be used in the next block. For example:","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"```jldoctest\njulia> foo = 42\n42\n```","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"The variable foo will not be defined in the next block:","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"```jldoctest\njulia> println(foo)\nERROR: UndefVarError: foo not defined\n```","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"To preserve definitions it is possible to label blocks in order to collect several blocks into the same module. All blocks with the same label (in the same file) will be evaluated in the same module, and hence share scope. This can be useful if the same definitions are used in more than one block, with for example text, or other doctest blocks, in between. Example:","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"```jldoctest mylabel\njulia> foo = 42\n42\n```","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"Now, since the block below has the same label as the block above, the variable foo can be used:","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"```jldoctest mylabel\njulia> println(foo)\n42\n```","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"note: Note\nLabeled doctest blocks do not need to be consecutive (as in the example above) to be included in the same module. They can be interspaced with unlabeled blocks or blocks with another label.","category":"page"},{"location":"man/doctests/#Setup-Code","page":"Doctests","title":"Setup Code","text":"","category":"section"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"Doctests may require some setup code that must be evaluated prior to that of the actual example, but that should not be displayed in the final documentation. There are three ways to specify the setup code, each appropriate in a different situation.","category":"page"},{"location":"man/doctests/#DocTestSetup-in-@meta-blocks","page":"Doctests","title":"DocTestSetup in @meta blocks","text":"","category":"section"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"For doctests in the Markdown source files, an @meta block containing a DocTestSetup = ... value can be used. In the example below, the function foo is defined inside a @meta block. This block will be evaluated at the start of the following doctest blocks:","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"```@meta\nDocTestSetup = quote\n    function foo(x)\n        return x^2\n    end\nend\n```\n\n```jldoctest\njulia> foo(2)\n4\n```\n\n```@meta\nDocTestSetup = nothing\n```","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"The DocTestSetup = nothing is not strictly necessary, but good practice nonetheless to help avoid unintentional definitions in following doctest blocks.","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"While technically the @meta blocks also work within docstrings, their use there is discouraged since the @meta blocks will show up when querying docstrings in the REPL.","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"note: Historic note\nIt used to be that DocTestSetups in @meta blocks in Markdown files that included docstrings also affected the doctests in the docstrings. Since Documenter 0.23 that is no longer the case. You should use Module-level metadata or Block-level setup code instead.","category":"page"},{"location":"man/doctests/#Module-level-metadata","page":"Doctests","title":"Module-level metadata","text":"","category":"section"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"For doctests that are in docstrings, the exported DocMeta module provides an API to attach metadata that applies to all the docstrings in a particular module. Setting up the DocTestSetup metadata should be done before the makedocs or doctest call:","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"using MyPackage, Documenter\nDocMeta.setdocmeta!(MyPackage, :DocTestSetup, :(using MyPackage); recursive=true)\nmakedocs(modules=[MyPackage], ...)","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"note: Note\nMake sure to include all (top-level) modules that contain docstrings with doctests in the modules argument to makedocs. Otherwise these doctests will not be run.","category":"page"},{"location":"man/doctests/#Block-level-setup-code","page":"Doctests","title":"Block-level setup code","text":"","category":"section"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"Yet another option is to use the setup keyword argument to the jldoctest block, which is convenient for short definitions, and for setups needed in inline docstrings.","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"```jldoctest; setup = :(foo(x) = x^2)\njulia> foo(2)\n4\n```","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"note: Note\nThe DocTestSetup and the setup values are re-evaluated at the start of each doctest block and no state is shared between any code blocks. To preserve definitions see Preserving Definitions Between Blocks.","category":"page"},{"location":"man/doctests/#Filtering-Doctests","page":"Doctests","title":"Filtering Doctests","text":"","category":"section"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"A part of the output of a doctest might be non-deterministic, e.g. pointer addresses and timings. It is therefore possible to filter a doctest so that the deterministic part can still be tested.","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"A filter takes the form of a regular expression. In a doctest, each match in the expected output and the actual output is removed before the two outputs are compared. Filters are added globally, i.e. applied to all doctests in the documentation, by passing a list of regular expressions to makedocs with the keyword doctestfilters.","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"For more fine grained control it is possible to define filters in @meta blocks by assigning them to the DocTestFilters variable, either as a single regular expression (DocTestFilters = [r\"foo\"]) or as a vector of several regex (DocTestFilters = [r\"foo\", r\"bar\"]).","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"An example is given below where some of the non-deterministic output from @time is filtered.","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"```@meta\nDocTestFilters = r\"[0-9\\.]+ seconds \\(.*\\)\"\n```\n\n```jldoctest\njulia> @time [1,2,3,4]\n  0.000003 seconds (5 allocations: 272 bytes)\n4-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n```\n\n```@meta\nDocTestFilters = nothing\n```","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"The DocTestFilters = nothing is not strictly necessary, but good practice nonetheless to help avoid unintentional filtering in following doctest blocks.","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"Another option is to use the filter keyword argument. This defines a doctest-local filter which is only active for the specific doctest. Note that such filters are not shared between named doctests either. It is possible to define a filter by a single regex (filter = r\"foo\") or as a list of regex (filter = [r\"foo\", r\"bar\"]). Example:","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"```jldoctest; filter = r\"[0-9\\.]+ seconds \\(.*\\)\"\njulia> @time [1,2,3,4]\n  0.000003 seconds (5 allocations: 272 bytes)\n4-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n```","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"note: Note\nThe global filters, filters defined in @meta blocks, and filters defined with the filter keyword argument are all applied to each doctest.","category":"page"},{"location":"man/doctests/#Doctesting-as-Part-of-Testing","page":"Doctests","title":"Doctesting as Part of Testing","text":"","category":"section"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"Documenter provides the doctest function which can be used to verify all doctests independently of manual builds. It behaves like a @testset, so it will return a testset if all the tests pass or throw a TestSetException if it does not.","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"For example, it can be used to verify doctests as part of the normal test suite by having e.g. the following in runtests.jl:","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"using Test, Documenter, MyPackage\ndoctest(MyPackage)","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"By default, it will also attempt to verify all the doctests on manual .md files, which it assumes are located under docs/src. This can be configured or disabled with the manual keyword (see doctest for more information).","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"It can also be included in another testset, in which case it gets incorporated into the parent testset. So, as another example, to test a package that does have separate manual pages, just docstrings, and also collects all the tests into a single testset, the runtests.jl might look as follows:","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"using Test, Documenter, MyPackage\n@testset \"MyPackage\" begin\n    ... # other tests & testsets\n    doctest(MyPackage; manual = false)\n    ... # other tests & testsets\nend","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"Note that you still need to make sure that all the necessary Module-level metadata for the doctests is set up before doctest is called. Also, you need to add Documenter and all the other packages you are loading in the doctests as test dependencies.","category":"page"},{"location":"man/doctests/#Fixing-Outdated-Doctests","page":"Doctests","title":"Fixing Outdated Doctests","text":"","category":"section"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"To fix outdated doctests, the doctest function can be called with fix = true. This will run the doctests, and overwrite the old results with the new output. This can be done just in the REPL:","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"julia> using Documenter, MyPackage\njulia> doctest(MyPackage, fix=true)","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"Alternatively, you can also pass the doctest = :fix keyword to makedocs.","category":"page"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"note: Note\nThe :fix option currently only works for LF line endings ('\\n')\nIt is recommended to git commit any code changes before running the doctest fixing. That way it is simple to restore to the previous state if the fixing goes wrong.\nThere are some corner cases where the fixing algorithm may replace the wrong code snippet. It is therefore recommended to manually inspect the result of the fixing before committing.","category":"page"},{"location":"man/doctests/#Skipping-Doctests","page":"Doctests","title":"Skipping Doctests","text":"","category":"section"},{"location":"man/doctests/","page":"Doctests","title":"Doctests","text":"Doctesting can be disabled by setting the makedocs keyword doctest = false. This should only be done when initially laying out the structure of a package's documentation, after which it's encouraged to always run doctests when building docs.","category":"page"},{"location":"lib/internals/docmeta/#DocMeta","page":"DocMeta","title":"DocMeta","text":"","category":"section"},{"location":"lib/internals/docmeta/","page":"DocMeta","title":"DocMeta","text":"DocMeta.initdocmeta!\nDocMeta.META\nDocMeta.METAMODULES\nDocMeta.METATYPE\nDocMeta.VALIDMETA","category":"page"},{"location":"man/hosting/#Hosting-Documentation","page":"Hosting Documentation","title":"Hosting Documentation","text":"","category":"section"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"After going through the Package Guide and Doctests page you will need to host the generated documentation somewhere for potential users to read. This guide will describe how to set up automatic updates for your package docs using either the Travis CI build service or GitHub Actions together with GitHub Pages for hosting the generated HTML files. This is the same approach used by this package to host its own docs – the docs you're currently reading.","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"note: Note\nFollowing this guide should be the final step you take after you are comfortable with the syntax and build process used by Documenter.jl. It is recommended that you only proceed with the steps outlined here once you have successfully managed to build your documentation locally with Documenter.This guide assumes that you already have GitHub and Travis accounts setup. If not then go set those up first and then return here.It is possible to deploy from other systems than Travis CI or GitHub Actions, see the section on Deployment systems.","category":"page"},{"location":"man/hosting/#Overview","page":"Hosting Documentation","title":"Overview","text":"","category":"section"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"Once set up correctly, the following will happen each time you push new updates to your package repository:","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"Buildbots will start up and run your package tests in a \"Test\" stage.\nAfter the Test stage completes, a single bot will run a new \"Documentation\" stage, which will build the documentation.\nIf the documentation is built successfully, the bot will attempt to push the generated HTML pages back to GitHub.","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"Note that the hosted documentation does not update when you make pull requests; you see updates only when you merge to master or push new tags.","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"In the upcoming sections we describe how to configure the build service to run the documentation build stage. In general it is easiest to choose the same service as the one testing your package. If you don't explicitly select the service with the deploy_config keyword argument to deploydocs Documenter will try to automatically detect which system is running and use that.","category":"page"},{"location":"man/hosting/#Travis-CI","page":"Hosting Documentation","title":"Travis CI","text":"","category":"section"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"To tell Travis that we want a new build stage, we can add the following to an existing .travis.yml file. Note that the snippet below will not work by itself and must be accompanied by a complete Travis file.","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"jobs:\n  include:\n    - stage: \"Documentation\"\n      julia: 1.6\n      os: linux\n      script:\n        - julia --project=docs/ -e 'using Pkg; Pkg.develop(PackageSpec(path=pwd()));\n                                               Pkg.instantiate()'\n        - julia --project=docs/ docs/make.jl\n      after_success: skip","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"where the julia: and os: entries decide the worker from which the docs are built and deployed. In the example above we will thus build and deploy the documentation from a linux worker running Julia 1.6. For more information on how to setup a build stage, see the Travis manual for Build Stages.","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"The three lines in the script: section do the following:","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"Instantiate the doc-building environment (i.e. docs/Project.toml, see below).\nInstall your package in the doc-build environment.\nRun the docs/make.jl script, which builds and deploys the documentation.","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"note: Note\nIf your package has a build script you should call Pkg.build(\"PackageName\") after the call to Pkg.develop to make sure the package is built properly.","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"note: matrix: section in .travis.yml\nTravis CI used to use matrix: as the section to configure to build matrix in the config file. This now appears to be a deprecated alias for jobs:. If you use both matrix: and jobs: in your configuration, matrix: overrides the settings under jobs:.If your .travis.yml file still uses matrix:, it should be replaced with a a single jobs: section.","category":"page"},{"location":"man/hosting/#travis-ssh","page":"Hosting Documentation","title":"Authentication: SSH Deploy Keys","text":"","category":"section"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"In order to push the generated documentation from Travis you need to add deploy keys. Deploy keys provide push access to a single repository, to allow secure deployment of generated documentation from the builder to GitHub. The SSH keys can be generated with DocumenterTools.genkeys from the DocumenterTools package.","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"note: Note\nYou will need several command line programs (which, git and ssh-keygen) to be installed for the following steps to work. If DocumenterTools fails, please see the the SSH Deploy Keys Walkthrough section for instruction on how to generate the keys manually (including in Windows).","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"Install and load DocumenterTools with","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"pkg> add DocumenterTools","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"julia> using DocumenterTools","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"Then call the DocumenterTools.genkeys function as follows:","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"julia> using DocumenterTools\njulia> DocumenterTools.genkeys(user=\"MyUser\", repo=\"MyPackage.jl\")","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"where MyPackage is the name of the package you would like to create deploy keys for and MyUser is your GitHub username. Note that the keyword arguments are optional and can be omitted.","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"If the package is checked out in development mode with ] dev MyPackage, you can also use DocumenterTools.genkeys as follows:","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"julia> using MyPackage\njulia> DocumenterTools.genkeys(MyPackage)","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"where MyPackage is the package you would like to create deploy keys for. The output will look similar to the text below:","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"[ Info: add the public key below to https://github.com/USER/REPO/settings/keys\n      with read/write access:\n\n[SSH PUBLIC KEY HERE]\n\n[ Info: add a secure environment variable named 'DOCUMENTER_KEY' to\n  https://travis-ci.com/USER/REPO/settings with value:\n\n[LONG BASE64 ENCODED PRIVATE KEY]","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"Follow the instructions that are printed out, namely:","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"Add the public ssh key to your settings page for the GitHub repository that you are setting up by following the .../settings/key link provided. Click on Add deploy key, enter the name documenter as the title, and copy the public key into the Key field. Check Allow write access to allow Documenter to commit the generated documentation to the repo.\nNext add the long private key to the Travis settings page using the provided link. Again note that you should include no whitespace when copying the key. In the Environment Variables section add a key with the name DOCUMENTER_KEY and the value that was printed out. Do not set the variable to be displayed in the build log. Then click Add.\nwarning: Security warning\nTo reiterate: make sure that this key is hidden. In particular, in the Travis CI settings the \"Display value in build log\" option should be OFF for the variable, so that it does not get printed when the tests run. This base64-encoded string contains the unencrypted private key that gives full write access to your repository, so it must be kept safe.  Also, make sure that you never expose this variable in your tests, nor merge any code that does. You can read more about Travis environment variables in Travis User Documentation.","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"note: Note\nThere are more explicit instructions for adding the keys to Travis in the SSH Deploy Keys Walkthrough section of the manual.","category":"page"},{"location":"man/hosting/#GitHub-Actions","page":"Hosting Documentation","title":"GitHub Actions","text":"","category":"section"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"To run the documentation build from GitHub Actions you should add the following to your workflow configuration file:","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"name: Documentation\n\non:\n  push:\n    branches:\n      - master\n    tags: '*'\n  pull_request:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - uses: julia-actions/setup-julia@latest\n        with:\n          version: '1.6'\n      - name: Install dependencies\n        run: julia --project=docs/ -e 'using Pkg; Pkg.develop(PackageSpec(path=pwd())); Pkg.instantiate()'\n      - name: Build and deploy\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # If authenticating with GitHub Actions token\n          DOCUMENTER_KEY: ${{ secrets.DOCUMENTER_KEY }} # If authenticating with SSH deploy key\n        run: julia --project=docs/ docs/make.jl","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"which will install Julia, checkout the correct commit of your repository, and run the build of the documentation. The julia-version:, julia-arch: and os: entries decide the environment from which the docs are built and deployed. In the example above we will thus build and deploy the documentation from a ubuntu worker running Julia 1.6. For more information on how to setup a GitHub workflow see the manual: Learn GitHub Actions.","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"The commands in the lines in the run: section do the same as for Travis, see the previous section.","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"warning: TagBot & tagged versions\nIn order to deploy documentation for tagged versions, the GitHub Actions workflow needs to be triggered by the tag. However, by default, when the Julia TagBot uses just the GITHUB_TOKEN for authentication, it does not have the permission to trigger any further workflows jobs, and so the documentation CI job never runs for the tag.To work around that, TagBot should be configured to use DOCUMENTER_KEY for authentication, by adding ssh: ${{ secrets.DOCUMENTER_KEY }} to the with section. A complete TagBot workflow file could look as follows:name: TagBot\non:\n  schedule:\n    - cron: 0 0 * * *\njobs:\n  TagBot:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JuliaRegistries/TagBot@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          ssh: ${{ secrets.DOCUMENTER_KEY }}","category":"page"},{"location":"man/hosting/#Authentication:-GITHUB_TOKEN","page":"Hosting Documentation","title":"Authentication: GITHUB_TOKEN","text":"","category":"section"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"When running from GitHub Actions it is possible to authenticate using the GitHub Actions authentication token (GITHUB_TOKEN). This is done by adding","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"to the configuration file, as showed in the previous section.","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"note: Note\nYou can only use GITHUB_TOKEN for authentication if the target repository of the deployment is the same as the current repository. In order to push elsewhere you should instead use a SSH deploy key.","category":"page"},{"location":"man/hosting/#Authentication:-SSH-Deploy-Keys","page":"Hosting Documentation","title":"Authentication: SSH Deploy Keys","text":"","category":"section"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"It is also possible to authenticate using a SSH deploy key, just as described in the SSH Deploy Keys section for Travis CI. You can generate the key in the same way, and then set the encoded key as a secret environment variable in your repository settings. You also need to make the key available for the doc building workflow by adding","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"DOCUMENTER_KEY: ${{ secrets.DOCUMENTER_KEY }}","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"to the configuration file, as showed in the previous section. See GitHub's manual for Encrypted secrets for more information.","category":"page"},{"location":"man/hosting/#Add-code-coverage-from-documentation-builds","page":"Hosting Documentation","title":"Add code coverage from documentation builds","text":"","category":"section"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"If you want code run during the documentation deployment to be covered by Codecov, you can edit the end of the docs part of your workflow configuration file so that docs/make.jl is run with the --code-coverage=user flag and the coverage reports are uploaded to Codecov:","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"      - run: julia --project=docs/ --code-coverage=user docs/make.jl\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          DOCUMENTER_KEY: ${{ secrets.DOCUMENTER_KEY }}\n      - uses: julia-actions/julia-processcoverage@v1\n      - uses: codecov/codecov-action@v1","category":"page"},{"location":"man/hosting/#docs/Project.toml","page":"Hosting Documentation","title":"docs/Project.toml","text":"","category":"section"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"The doc-build environment docs/Project.toml includes Documenter and other doc-build dependencies your package might have. If Documenter is the only dependency, then the Project.toml should include the following:","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"import Documenter, Markdown\nm = match(r\"^version = \\\"(\\d+.\\d+.\\d+)(-DEV)?(\\+.+)?\\\"$\"m,\n    read(joinpath(dirname(dirname(pathof(Documenter))), \"Project.toml\"), String))\nv = VersionNumber(m.captures[1])\nMarkdown.parse(\"\"\"\n```toml\n[deps]\nDocumenter = \"e30172f5-a6a5-5a46-863b-614d45cd2de4\"\n\n[compat]\nDocumenter = \"$(v.major).$(v.minor)\"\n```\n\"\"\")","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"Note that it is recommended that you have a [compat] section, like the one above, in your Project.toml file, which would restrict Documenter's version that gets installed when the build runs. This is to make sure that your builds do not start failing suddenly due to a new major release of Documenter, which may include breaking changes. However, it also means that you will not get updates to Documenter automatically, and hence need to upgrade Documenter's major version yourself.","category":"page"},{"location":"man/hosting/#The-deploydocs-Function","page":"Hosting Documentation","title":"The deploydocs Function","text":"","category":"section"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"At the moment your docs/make.jl file probably only contains","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"using Documenter, PACKAGE_NAME\n\nmakedocs()","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"We'll need to add an additional function call to this file after makedocs which would perform the deployment of the docs to the gh-pages branch. Add the following at the end of the file:","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"deploydocs(\n    repo = \"github.com/USER_NAME/PACKAGE_NAME.jl.git\",\n)","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"where USER_NAME and PACKAGE_NAME must be set to the appropriate names. Note that repo should not specify any protocol, i.e. it should not begin with https:// or git@.","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"See the deploydocs function documentation for more details.","category":"page"},{"location":"man/hosting/#.gitignore","page":"Hosting Documentation","title":".gitignore","text":"","category":"section"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"Add the following to your package's .gitignore file","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"docs/build/","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"These are needed to avoid committing generated content to your repository.","category":"page"},{"location":"man/hosting/#gh-pages-Branch","page":"Hosting Documentation","title":"gh-pages Branch","text":"","category":"section"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"By default, Documenter pushes documentation to the gh-pages branch. If the branch does not exist it will be created automatically by deploydocs. If it does exist then Documenter simply adds an additional commit with the built documentation. You should be aware that Documenter may overwrite existing content without warning.","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"If you wish to create the gh-pages branch manually that can be done following these instructions.","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"You also need to make sure that you have \"gh-pages branch\" selected as the source of the GitHub Pages site in your GitHub repository settings, so that GitHub would actually serve the contents as a website.","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"Cleaning up gh-pages. Note that the gh-pages branch can become very large, especially when push_preview is enabled to build documentation for each pull request. To clean up the branch and remove stale documentation previews, a GitHub Actions workflow like the following can be used.","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"name: Doc Preview Cleanup\n\non:\n  pull_request:\n    types: [closed]\n\njobs:\n  doc-preview-cleanup:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout gh-pages branch\n        uses: actions/checkout@v2\n        with:\n          ref: gh-pages\n      - name: Delete preview and history + push changes\n        run: |\n            if [ -d \"previews/PR$PRNUM\" ]; then\n              git config user.name \"Documenter.jl\"\n              git config user.email \"documenter@juliadocs.github.io\"\n              git rm -rf \"previews/PR$PRNUM\"\n              git commit -m \"delete preview\"\n              git branch gh-pages-new $(echo \"delete history\" | git commit-tree HEAD^{tree})\n              git push --force origin gh-pages-new:gh-pages\n            fi\n        env:\n            PRNUM: ${{ github.event.number }}","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"This workflow was taken from CliMA/TimeMachine.jl (Apache License 2.0).","category":"page"},{"location":"man/hosting/#Documentation-Versions","page":"Hosting Documentation","title":"Documentation Versions","text":"","category":"section"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"note: Note\nThis section describes the default mode of deployment, which is by version. See the following section on Deploying without the versioning scheme if you want to deploy directly to the \"root\".","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"By default the documentation is deployed as follows:","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"Documentation built for a tag vX.Y.Z will be stored in a folder vX.Y.Z.\nDocumentation built from the devbranch branch (master by default) is stored in a folder determined by the devurl keyword to deploydocs (dev by default).","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"Which versions that will show up in the version selector is determined by the versions argument to deploydocs.","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"Unless a custom domain is being used, the pages are found at:","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"https://USER_NAME.github.io/PACKAGE_NAME.jl/vX.Y.Z\nhttps://USER_NAME.github.io/PACKAGE_NAME.jl/dev","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"By default Documenter will create a link called stable that points to the latest release","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"https://USER_NAME.github.io/PACKAGE_NAME.jl/stable","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"It is recommended to use this link, rather than the versioned links, since it will be updated with new releases.","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"info: Fixing broken release deployments\nIt can happen that, for one reason or another, the documentation for a tagged version of your package fails to deploy and a fix would require changes to the source code (e.g. a misconfigured make.jl). However, as registered tags should not be changed, you can not simply update the original tag (e.g. v1.2.3) with the fix.In this situation, you can manually create and push a tag for the commit with the fix that has the same version number, but also some build metadata (e.g. v1.2.3+doc1). For Git, this is a completely different tag, so it won't interfere with anything. But when Documenter runs on this tag, it will ignore the build metadata and deploy the docs as if they were for version v1.2.3.Note that, as with normal tag builds, you need to make sure that your CI that runs Documenter is configured to run on such tags (e.g. that the regex constraining the branches the CI runs on is broad enough etc).","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"Once your documentation has been pushed to the gh-pages branch you should add links to your README.md pointing to the stable (and perhaps dev) documentation URLs. It is common practice to make use of \"badges\" similar to those used for Travis and AppVeyor build statuses or code coverage. Adding the following to your package README.md should be all that is necessary:","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"[![](https://img.shields.io/badge/docs-stable-blue.svg)](https://USER_NAME.github.io/PACKAGE_NAME.jl/stable)\n[![](https://img.shields.io/badge/docs-dev-blue.svg)](https://USER_NAME.github.io/PACKAGE_NAME.jl/dev)","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"PACKAGE_NAME and USER_NAME should be replaced with their appropriate values. The colour and text of the image can be changed by altering docs-stable-blue as described on shields.io, though it is recommended that package authors follow this standard to make it easier for potential users to find documentation links across multiple package README files.","category":"page"},{"location":"man/hosting/#Deploying-without-the-versioning-scheme","page":"Hosting Documentation","title":"Deploying without the versioning scheme","text":"","category":"section"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"Documenter supports deployment directly to the website root ignoring any version subfolders as described in the previous section. This can be useful if you use Documenter for something that is not a versioned project, for example. To do this, pass versions = nothing to the deploydocs function. Now the pages should be found directly at","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"https://USER_NAME.github.io/PACKAGE_NAME.jl/","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"Preview builds are still deployed to the previews subfolder.","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"note: Note\nThe landing page for the JuliaDocs GitHub organization (source repository) is one example where this functionality is used.","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"Final Remarks","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"That should be all that is needed to enable automatic documentation building. Pushing new commits to your master branch should trigger doc builds. Note that other branches do not trigger these builds and neither do pull requests by potential contributors.","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"If you would like to see a more complete example of how this process is setup then take a look at this package's repository for some inspiration.","category":"page"},{"location":"man/hosting/#Deployment-systems","page":"Hosting Documentation","title":"Deployment systems","text":"","category":"section"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"It is possible to customize Documenter to use other systems then the ones described in the sections above. This is done by passing a configuration (a DeployConfig) to deploydocs by the deploy_config keyword argument. Documenter supports Travis, GitHubActions, GitLab, and Buildkite natively, but it is easy to define your own by following the simple interface described below.","category":"page"},{"location":"man/hosting/","page":"Hosting Documentation","title":"Hosting Documentation","text":"Documenter.DeployConfig\nDocumenter.deploy_folder\nDocumenter.DeployDecision\nDocumenter.authentication_method\nDocumenter.authenticated_repo_url\nDocumenter.documenter_key\nDocumenter.documenter_key_previews\nDocumenter.Travis\nDocumenter.GitHubActions\nDocumenter.GitLab\nDocumenter.Buildkite","category":"page"},{"location":"lib/internals/docsystem/#DocSystem","page":"DocSystem","title":"DocSystem","text":"","category":"section"},{"location":"lib/internals/docsystem/","page":"DocSystem","title":"DocSystem","text":"Modules = [Documenter.DocSystem]","category":"page"},{"location":"lib/internals/documenter/#Documenter","page":"Documenter","title":"Documenter","text":"","category":"section"},{"location":"lib/internals/documenter/","page":"Documenter","title":"Documenter","text":"Documenter.gitrm_copy\nDocumenter.git_push\nDocumenter.user_host_upstream","category":"page"},{"location":"lib/internals/textdiff/#TextDiff","page":"TextDiff","title":"TextDiff","text":"","category":"section"},{"location":"lib/internals/textdiff/","page":"TextDiff","title":"TextDiff","text":"Modules = [Documenter.Utilities.TextDiff]","category":"page"},{"location":"#Documenter.jl","page":"Home","title":"Documenter.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A documentation generator for Julia.","category":"page"},{"location":"","page":"Home","title":"Home","text":"A package for building documentation from docstrings and markdown files.","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Note\nPlease read through the Documentation section of the main Julia manual if this is your first time using Julia's documentation system. Once you've read through how to write documentation for your code then come back here.","category":"page"},{"location":"#Package-Features","page":"Home","title":"Package Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Write all your documentation in Markdown.\nMinimal configuration.\nSupports Julia 0.7 and 1.0.\nDoctests Julia code blocks.\nCross references for docs and section headers.\nLaTeX syntax support.\nChecks for missing docstrings and incorrect cross references.\nGenerates tables of contents and docstring indexes.\nAutomatically builds and deploys docs from Travis to GitHub Pages.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The Package Guide provides a tutorial explaining how to get started using Documenter.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Some examples of packages using Documenter can be found on the Examples page.","category":"page"},{"location":"","page":"Home","title":"Home","text":"See the Index for the complete list of documented functions and types.","category":"page"},{"location":"#Manual-Outline","page":"Home","title":"Manual Outline","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"man/guide.md\",\n    \"man/examples.md\",\n    \"man/syntax.md\",\n    \"man/doctests.md\",\n    \"man/hosting.md\",\n    \"man/latex.md\",\n    \"man/contributing.md\",\n]\nDepth = 1","category":"page"},{"location":"#Library-Outline","page":"Home","title":"Library Outline","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"lib/public.md\", \"lib/internals.md\"]","category":"page"},{"location":"#main-index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"lib/public.md\"]","category":"page"},{"location":"lib/internals/anchors/#Anchors","page":"Anchors","title":"Anchors","text":"","category":"section"},{"location":"lib/internals/anchors/","page":"Anchors","title":"Anchors","text":"Modules = [Documenter.Anchors]","category":"page"},{"location":"man/syntax/#Syntax","page":"Syntax","title":"Syntax","text":"","category":"section"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"This section of the manual describes the syntax used by Documenter to build documentation. For supported Markdown syntax, see the documentation for the Markdown standard library in the Julia manual.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Pages = [\"syntax.md\"]","category":"page"},{"location":"man/syntax/#@docs-block","page":"Syntax","title":"@docs block","text":"","category":"section"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Splice one or more docstrings into a document in place of the code block, i.e.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"```@docs\nDocumenter\nmakedocs\ndeploydocs\n```","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"This block type is evaluated within the CurrentModule module if defined, otherwise within Main, and so each object listed in the block should be visible from that module. Undefined objects will raise warnings during documentation generation and cause the code block to be rendered in the final document unchanged.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Objects may not be listed more than once within the document. When duplicate objects are detected an error will be raised and the build process will be terminated.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"To ensure that all docstrings from a module are included in the final document the modules keyword for makedocs can be set to the desired module or modules, i.e.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"makedocs(\n    modules = [Documenter],\n)","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"which will cause any unlisted docstrings to raise warnings when makedocs is called. If modules is not defined then no warnings are printed, even if a document has missing docstrings.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Notice also that you can use @docs to display the documentation strings of only specific methods, by stating the dispatch types. For example","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"```@docs\nf(::Type1, ::Type2)\n```","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"will only display the documentation string of f that is related to these types. This can be useful when your module extends a function and adds a documentation string to that new method.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Note that when specifying signatures, it should match the method definition exactly. Documenter will not match methods based on dispatch rules. For example, assuming you have a docstring attached to foo(::Integer) = ..., then neither foo(::Number) nor foo(::Int64) will match it in an at-docs block (even though Int64 <: Integer <: Number). The only way you can splice that docstring is by listing exactly foo(::Integer) in the at-docs block.","category":"page"},{"location":"man/syntax/#@autodocs-block","page":"Syntax","title":"@autodocs block","text":"","category":"section"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Automatically splices all docstrings from the provided modules in place of the code block. This is equivalent to manually adding all the docstrings in a @docs block.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"```@autodocs\nModules = [Foo, Bar, Bar.Baz]\nOrder   = [:function, :type]\n```","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"The above @autodocs block adds all the docstrings found in modules Foo, Bar, and Bar.Baz that refer to functions or types to the document. Note that a submodule must be listed explicitly in order to include the docstrings within it.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Each module is added in order and so all docs from Foo will appear before those of Bar. Possible values for the Order vector are","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":":module\n:constant\n:type\n:function\n:macro","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"If no Order is provided then the order listed above is used.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"When a potential docstring is found in one of the listed modules, but does not match any value from Order then it will be omitted from the document. Hence Order acts as a basic filter as well as sorter.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"In addition to Order, a Pages vector may be included in @autodocs to filter docstrings based on the source file in which they are defined:","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"```@autodocs\nModules = [Foo]\nPages   = [\"a.jl\", \"b.jl\"]\n```","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"In the above example docstrings from module Foo found in source files that end in a.jl and b.jl are included. The page order provided by Pages is also used to sort the docstrings. Note that page matching is done using the end of the provided strings and so a.jl will be matched by any source file that ends in a.jl, i.e. src/a.jl or src/foo/a.jl.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"To filter out certain docstrings by your own criteria, you can provide function with the Filter keyword:","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"```@autodocs\nModules = [Foo]\nFilter = t -> typeof(t) === DataType && t <: Foo.C\n```","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"In the given example, only the docstrings of the subtypes of Foo.C are shown. Instead of an anonymous function you can give the name of a function you defined beforehand, too:","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"```@autodocs\nModules = [Foo]\nFilter =  myCustomFilterFunction\n```","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"To include only the exported names from the modules listed in Modules use Private = false. In a similar way Public = false can be used to only show the unexported names. By default both of these are set to true so that all names will be shown.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Functions exported from `Foo`:\n\n```@autodocs\nModules = [Foo]\nPrivate = false\nOrder = [:function]\n```\n\nPrivate types in module `Foo`:\n\n```@autodocs\nModules = [Foo]\nPublic = false\nOrder = [:type]\n```","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"note: Note\nWhen more complex sorting is needed then use @docs to define it explicitly.","category":"page"},{"location":"man/syntax/#@ref-link","page":"Syntax","title":"@ref link","text":"","category":"section"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Used in markdown links as the URL to tell Documenter to generate a cross-reference automatically. The text part of the link can be a docstring, header name, or GitHub PR/Issue number.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"# Syntax\n\n... [`makedocs`](@ref) ...\n\n# Functions\n\n```@docs\nmakedocs\n```\n\n... [Syntax](@ref) ...\n\n... [#42](@ref) ...","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Plain text in the \"text\" part of a link will either cross-reference a header, or, when it is a number preceded by a #, a GitHub issue/pull request. Text wrapped in backticks will cross-reference a docstring from a @docs block.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"@refs may refer to docstrings or headers on different pages as well as the current page using the same syntax.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Note that depending on what the CurrentModule is set to, a docstring @ref may need to be prefixed by the module which defines it.","category":"page"},{"location":"man/syntax/#Duplicate-Headers","page":"Syntax","title":"Duplicate Headers","text":"","category":"section"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"In some cases a document may contain multiple headers with the same name, but on different pages or of different levels. To allow @ref to cross-reference a duplicate header it must be given a name as in the following example","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"# [Header](@id my_custom_header_name)\n\n...\n\n## Header\n\n... [Custom Header](@ref my_custom_header_name) ...","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"The link that wraps the named header is removed in the final document. The text for a named @ref ... does not need to match the header that it references. Named @ref ...s may refer to headers on different pages in the same way as unnamed ones do.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Duplicate docstring references do not occur since splicing the same docstring into a document more than once is disallowed.","category":"page"},{"location":"man/syntax/#Named-doc-@refs","page":"Syntax","title":"Named doc @refs","text":"","category":"section"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Docstring @refs can also be \"named\" in a similar way to headers as shown in the Duplicate Headers section above. For example","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"module Mod\n\n\"\"\"\nBoth of the following references point to `g` found in module `Main.Other`:\n\n  * [`Main.Other.g`](@ref)\n  * [`g`](@ref Main.Other.g)\n\n\"\"\"\nf(args...) = # ...\n\nend","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"This can be useful to avoid having to write fully qualified names for references that are not imported into the current module, or when the text displayed in the link is used to add additional meaning to the surrounding text, such as","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Use [`for i = 1:10 ...`](@ref for) to loop over all the numbers from 1 to 10.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"note: Note\nNamed doc @refs should be used sparingly since writing unqualified names may, in some cases, make it difficult to tell which function is being referred to in a particular docstring if there happen to be several modules that provide definitions with the same name.","category":"page"},{"location":"man/syntax/#@meta-block","page":"Syntax","title":"@meta block","text":"","category":"section"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"This block type is used to define metadata key/value pairs that can be used elsewhere in the page. Currently recognised keys:","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"CurrentModule: module where Documenter evaluates, for example, @docs-block and @ref-links.\nDocTestSetup: code to be evaluated before a doctest, see the Setup Code section under Doctests.\nDocTestFilters: filters to deal with, for example, unpredictable output from doctests, see the Filtering Doctests section under Doctests.\nEditURL: link to where the page can be edited. This defaults to the .md page itself, but if the source is something else (for example if the .md page is generated as part of the doc build) this can be set, either as a local link, or an absolute url.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Example:","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"```@meta\nCurrentModule = FooBar\nDocTestSetup  = quote\n    using MyPackage\nend\nDocTestFilters = [r\"Stacktrace:[\\s\\S]+\"]\nEditURL = \"link/to/source/file\"\n```","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Note that @meta blocks are always evaluated in Main.","category":"page"},{"location":"man/syntax/#@index-block","page":"Syntax","title":"@index block","text":"","category":"section"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Generates a list of links to docstrings that have been spliced into a document. Valid settings are Pages, Modules, and Order. For example:","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"```@index\nPages   = [\"foo.md\"]\nModules = [Foo, Bar]\nOrder   = [:function, :type]\n```","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"When Pages or Modules are not provided then all pages or modules are included. Order defaults to","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"[:module, :constant, :type, :function, :macro]","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"if not specified. Order and Modules behave the same way as in @autodocs blocks and filter out docstrings that do not match one of the modules or categories specified.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Note that the values assigned to Pages, Modules, and Order may be any valid Julia code and thus can be something more complex that an array literal if required, i.e.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"```@index\nPages = map(file -> joinpath(\"man\", file), readdir(\"man\"))\n```","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"It should be noted though that in this case Pages may not be sorted in the order that is expected by the user. Try to stick to array literals as much as possible.","category":"page"},{"location":"man/syntax/#@contents-block","page":"Syntax","title":"@contents block","text":"","category":"section"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Generates a nested list of links to document sections. Valid settings are Pages and Depth.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"```@contents\nPages = [\"foo.md\"]\nDepth = 5\n```","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"As with @index if Pages is not provided then all pages are included. The default Depth value is 2.","category":"page"},{"location":"man/syntax/#@example-block","page":"Syntax","title":"@example block","text":"","category":"section"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Evaluates the code block and inserts the result of the last expression into the final document along with the original source code. If the last expression returns nothing, the stdout and stderr streams of the whole block are inserted instead. A semicolon ; at the end of the last line has no effect.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"```@example\na = 1\nb = 2\na + b\n```","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"The above @example block will splice the following into the final document","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"```julia\na = 1\nb = 2\na + b\n```\n\n```\n3\n```","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Leading and trailing newlines are removed from the rendered code blocks. Trailing whitespace on each line is also removed.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"note: Note\nThe working directory, pwd, is set to the directory in build where the file will be written to, and the paths in include calls are interpreted to be relative to pwd. This can be customized with the workdir keyword of makedocs.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Hiding Source Code","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Code blocks may have some content that does not need to be displayed in the final document. # hide comments can be appended to lines that should not be rendered, i.e.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"```@example\nimport Random # hide\nRandom.seed!(1) # hide\nA = rand(3, 3)\nb = [1, 2, 3]\nA \\ b\n```","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Note that appending # hide to every line in an @example block will result in the block being hidden in the rendered document. The results block will still be rendered though. @setup blocks are a convenient shorthand for hiding an entire block, including the output.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Empty Outputs","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"When an @example block returns nothing, the results block will show instead the stdout and stderr streams produced by the whole block. If these are empty, the results block is not displayed at all; only the source code block will be shown in the rendered document.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Named @example Blocks","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"By default @example blocks are run in their own anonymous Modules to avoid side-effects between blocks. To share the same module between different blocks on a page the @example can be named with the following syntax","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"```@example 1\na = 1\n```\n\n```@example 1\nprintln(a)\n```","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"The name can be any text, not just integers as in the example above, i.e. @example foo.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Named @example blocks can be useful when generating documentation that requires intermediate explanation or multimedia such as plots as illustrated in the following example","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"First we define some functions\n\n```@example 1\nusing PyPlot # hide\nf(x) = sin(2x) + 1\ng(x) = cos(x) - x\n```\n\nand then we plot `f` over the interval from ``-π`` to ``π``\n\n```@example 1\nx = linspace(-π, π)\nplot(x, f(x), color = \"red\")\nsavefig(\"f-plot.svg\"); nothing # hide\n```\n\n![](f-plot.svg)\n\nand then we do the same with `g`\n\n```@example 1\nplot(x, g(x), color = \"blue\")\nsavefig(\"g-plot.svg\"); nothing # hide\n```\n\n![](g-plot.svg)","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Note that @example blocks are evaluated within the directory of build where the file will be rendered . This means than in the above example savefig will output the .svg files into that directory. This allows the images to be easily referenced without needing to worry about relative paths.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"info: Info\nIf you use Plots.jl with the default backend  GR.jl, you will likely see warnings likeqt.qpa.xcb: could not connect to display \nqt.qpa.plugin: Could not load the Qt platform plugin \"xcb\" in \"\" even though it was found.To fix these, you need to set the environment variable GKSwstype to 100. For example, if you use GitHub actions to build your documentation, you can modify the default script to- name: Build and deploy\n  env:\n    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # For authentication with GitHub Actions token\n    DOCUMENTER_KEY: ${{ secrets.DOCUMENTER_KEY }} # For authentication with SSH deploy key\n    GKSwstype: \"100\" # https://discourse.julialang.org/t/generation-of-documentation-fails-qt-qpa-xcb-could-not-connect-to-display/60988\n  run: julia --project=docs --color=yes docs/make.jlAlternatively, you can set this environemnt variable directly in Julia usingENV[\"GKSwstype\"] = \"100\"","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"@example blocks automatically define ans which, as in the Julia REPL, is bound to the value of the last evaluated expression. This can be useful in situations such as the following one where where binding the object returned by plot to a named variable would look out of place in the final rendered documentation:","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"```@example\nusing Gadfly # hide\nplot([sin, x -> 2sin(x) + x], -2π, 2π)\ndraw(SVG(\"plot.svg\", 6inch, 4inch), ans); nothing # hide\n```\n\n![](plot.svg)","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Color output","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"@example blocks support colored text output by mapping ANSI escape codes to HTML. For example, this block:","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"```@example\nprintstyled(\"Here are some colors:\\n\"; color=:red, bold=true)\nfor color in 0:15\n    print(\"\\e[38;5;$(color);48;5;$(color)m  \")\n    print(\"\\e[49m\", lpad(color, 3), \" \")\n    color % 8 == 7 && println()\nend\nprint(\"\\e[m\")\n```","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"results in the following input and output blocks:","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"printstyled(\"Here are some colors:\\n\"; color=:red, bold=true)\nfor color in 0:15\n    print(\"\\e[38;5;$(color);48;5;$(color)m  \")\n    print(\"\\e[49m\", lpad(color, 3), \" \")\n    color % 8 == 7 && println()\nend\nprint(\"\\e[m\")","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"note: Disable color output\nTo disable color output globally, pass ansicolor=false to Documenter.HTML, and to disable locally for the block, use ansicolor=false, like so:```@example; ansicolor=false\nprintstyled(\"hello, world\"; color=:red, bold=true)\n```","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Delayed Execution of @example Blocks","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"@example blocks accept a keyword argument continued which can be set to true or false (defaults to false). When continued = true the execution of the code is delayed until the next continued = false @example-block. This is needed for example when the expression in a block is not complete. Example:","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"```@example half-loop; continued = true\nfor i in 1:3\n    j = i^2\n```\nSome text explaining what we should do with `j`\n```@example half-loop\n    println(j)\nend\n```","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Here the first block is not complete – the loop is missing the end. Thus, by setting continued = true here we delay the evaluation of the first block, until we reach the second block. A block with continued = true does not have any output.","category":"page"},{"location":"man/syntax/#@repl-block","page":"Syntax","title":"@repl block","text":"","category":"section"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"These are similar to @example blocks, but add a julia> prompt before each toplevel expression and do not fail upon encountering an error. The # hide syntax may be used in @repl blocks in the same way as in @example blocks. Furthermore, a semicolon ; at the end of a line will suppress the output as in the Julia REPL.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"```@repl\na = 1\nb = 2\na + b\n```","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"will generate","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"```julia\njulia> a = 1\n1\n\njulia> b = 2\n2\n\njulia> a + b\n3\n```","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"And likewise","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"```@repl\nsqrt(-1)\n```","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"will generate","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"```julia\njulia> sqrt(-1)\nERROR: DomainError with -1.0:\nsqrt will only return a complex result if called with a complex argument. Try sqrt(Complex(x)).\n```","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"@repl blocks support colored output, just like @example blocks. The following block","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"```@repl\nprintstyled(\"hello, world\"; color=:red, bold=true)\n```","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"gives","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"printstyled(\"hello, world\"; color=:red, bold=true)","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"note: Disable color output\nTo disable color output globally, pass ansicolor=false to Documenter.HTML, and to disable locally for the block, use ansicolor=false, like so:```@repl; ansicolor=false\nprintstyled(\"hello, world\"; color=:red, bold=true)\n```","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Named @repl <name> blocks behave in the same way as named @example <name> blocks.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"note: Note\nThe working directory, pwd, is set to the directory in build where the file will be written to, and the paths in include calls are interpreted to be relative to pwd.  This can be customized with the workdir keyword of makedocs.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"note: Soft vs hard scope\nJulia 1.5 changed the REPL to use the soft scope when handling global variables in for loops etc. When using Documenter with Julia 1.5 or above, Documenter uses the soft scope in @repl-blocks and REPL-type doctests.","category":"page"},{"location":"man/syntax/#@setup-name-block","page":"Syntax","title":"@setup <name> block","text":"","category":"section"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"These are similar to @example blocks, but both the input and output are hidden from the final document. This can be convenient if there are several lines of setup code that need to be hidden.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"note: Note\nUnlike @example and @repl blocks, @setup requires a <name> attribute to associate it with downstream @example <name> and @repl <name> blocks.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"```@setup abc\nusing RDatasets\nusing DataFrames\niris = dataset(\"datasets\", \"iris\")\n```\n\n```@example abc\nprintln(iris)\n```","category":"page"},{"location":"man/syntax/#@eval-block","page":"Syntax","title":"@eval block","text":"","category":"section"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Evaluates the contents of the block and inserts the resulting value into the final document.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"In the following example we use the PyPlot package to generate a plot and display it in the final document.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"```@eval\nusing PyPlot\n\nx = linspace(-π, π)\ny = sin(x)\n\nplot(x, y, color = \"red\")\nsavefig(\"plot.svg\")\n\nnothing\n```\n\n![](plot.svg)","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Another example is to generate markdown tables from machine readable data formats such as CSV or JSON.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"```@eval\nusing CSV\nusing Latexify\ndf = CSV.read(\"table.csv\")\nmdtable(df,latex=false)\n```","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Which will generate a markdown version of the CSV file table.csv and render it in the output format.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Note that each @eval block evaluates its contents within a separate module. When evaluating each block the present working directory, pwd, is set to the directory in build where the file will be written to, and the paths in include calls are interpreted to be relative to pwd.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Also, instead of returning nothing in the example above we could have returned a new Markdown.MD object through Markdown.parse. This can be more appropriate when the filename is not known until evaluation of the block itself.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"note: Note\nIn most cases @example is preferred over @eval. Just like in normal Julia code where eval should be only be considered as a last resort, @eval should be treated in the same way.","category":"page"},{"location":"man/syntax/#@raw-format-block","page":"Syntax","title":"@raw <format> block","text":"","category":"section"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"Allows code to be inserted into the final document verbatim. E.g. to insert custom HTML or LaTeX code into the output.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"The format argument is mandatory and Documenter uses it to determine whether a particular block should be copied over to the output or not. Currently supported formats are html and latex, used by the respective writers. A @raw block whose format is not recognized is usually ignored, so it is possible to have a raw block for each output format without the blocks being duplicated in the output.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"The following example shows how SVG code with custom styling can be included into documents using the @raw block.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"```@raw html\n<svg style=\"display: block; margin: 0 auto;\" width=\"5em\" heigth=\"5em\">\n\t<circle cx=\"2.5em\" cy=\"2.5em\" r=\"2em\" stroke=\"black\" stroke-width=\".1em\" fill=\"red\" />\n</svg>\n```","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"It will show up as follows, with code having been copied over verbatim to the HTML file.","category":"page"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"<svg style=\"display: block; margin: 0 auto;\" width=\"5em\" heigth=\"5em\">\n\t<circle cx=\"2.5em\" cy=\"2.5em\" r=\"2em\" stroke=\"black\" stroke-width=\".1em\" fill=\"red\" />\n    (SVG)\n</svg>","category":"page"}]
}
